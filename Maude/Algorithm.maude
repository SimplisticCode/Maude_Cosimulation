load Port

(omod Algorithm is 
 protecting Ports + ALGEBRAICLOOPSET .
 sorts ActionType FMIActionType ComplexActionType ActionList Action  .
 subsort Action < ActionList .
    
 *** Types
 ops CreateExp EnterInitialization ExitInitialization Terminate FreeInstance Unload : -> FMIActionType [ctor] . 
 ops Set Get Step Save : -> ActionType [ctor] . 
 ops StepNegotiation Loop : -> ComplexActionType [ctor] . 
 op fmiEvent:_SUs:_ : FMIActionType NeOidSet -> Action [ctor format(nir! d d d d)] .
 op portEvent:_SU:_PId:_ : ActionType SUID OidSet -> Action [ctor format(nib! d d d d d d)] .
 op stepEvent:_StepSize:_ : SUID NzNat -> Action [ctor format(nig! d d d d)] .
 op complexEvent:_SaveSUs:_RestoreSUs:_Actions:_ : ComplexActionType OidSet OidSet ActionList -> Action [ctor format(niy! d d d d d d ni! niy!)] .
 
 *** Operations
 op _memberOf_ : EPortId AlgebraicLoopSet -> Bool . 
 op getSUs : PortSet OidSet -> OidSet .
 op emptyList : -> ActionList [ctor] .
 op _;_ : ActionList ActionList -> ActionList [ctor assoc id: emptyList] .


 vars SU PORTID : Oid .
 var SUIDs : OidSet .
 var LOOPS : AlgebraicLoopSet .
 var PORT : EPortId .
 var LOOPTYPE : LoopType .
 var PORTSET : PortSet .
 vars ENDTIME STEPSIZE : NzNat .

 eq PORT memberOf ((AlgebraicLoop: (PORT , PORTSET)  Type: LOOPTYPE) , LOOPS) = true .
 eq PORT memberOf LOOPS = false [owise] .

 eq getSUs(empty, SUIDs) = SUIDs .
 ceq getSUs(((SU ! PORTID), PORTSET), SUIDs) = getSUs(PORTSET, SUIDs) if SU in SUIDs .
 eq getSUs(((SU ! PORTID), PORTSET), SUIDs) = getSUs(PORTSET, (SU , SUIDs)) [owise] .

class SimulationData | 
    SNSet : OidSet,
    defaultStepSize : NzNat,
    actualStepSize : NzNat,
    unsolvedSCC : AlgebraicLoopSet,
    solvedSCC : AlgebraicLoopSet,
    guessOn : PortSet,
    values : PortValueMap,
    simulationTime : Nat,
    suids : NeOidSet .

class AlgorithmData | 
    CosimStep : ActionList, 
    Initialization : ActionList,
    Termination : ActionList,
    endTime : NzNat .


  op initialOrchestrationData : NzNat AlgebraicLoopSet NeOidSet -> Object .
  eq initialOrchestrationData(STEPSIZE, LOOPS, SUIDs) =
    < "Orchestrator" : SimulationData | 
      SNSet : empty,
      defaultStepSize : STEPSIZE,
      actualStepSize : STEPSIZE,
      unsolvedSCC : LOOPS,
      solvedSCC : empty,
      guessOn : empty,
      values : empty,
      simulationTime : 0,
      suids : SUIDs 
    > .

  op initialAlgorithmData : NzNat  -> Object .
  eq initialAlgorithmData(ENDTIME) =
    < "Algorithm" : AlgorithmData | 
      CosimStep : emptyList, 
      Initialization : emptyList,
      Termination : emptyList,
      endTime : ENDTIME > .

endom)

