load Port

(fmod ALGEBRAICLOOP is
    protecting Ports .
    sort AlgebraicLoop LoopType .
    ops F R : -> LoopType [ctor] . 
    op AlgebraicLoop:_Type:_ : PortSet LoopType -> AlgebraicLoop [ctor] . 
endfm )

(view ALGEBRAICLOOPAsTRIV from TRIV to ALGEBRAICLOOP is
  protecting ALGEBRAICLOOP .
  sort Elt to AlgebraicLoop .
endv)

(fmod ALGEBRAICLOOPSET is
  protecting SET{ALGEBRAICLOOPAsTRIV} * (sort NeSet{ALGEBRAICLOOPAsTRIV} to NeALSet, sort Set{ALGEBRAICLOOPAsTRIV} to AlgebraicLoopSet) .
endfm)

*** TODO look at action list to make it to a proper list
(omod Algorithm is 
 protecting Ports + ALGEBRAICLOOPSET .
 sorts ActionType FMIActionType ComplexActionType ActionList Action  .
 subsort Action < ActionList .
    
 *** Types
 ops CreateExp EnterInitialization ExitInitialization Terminate FreeInstance Unload : -> FMIActionType [ctor] . 
 ops Set Get Step Save : -> ActionType [ctor] . 
 ops StepNegotiation Loop : -> ComplexActionType [ctor] . 
 *** Rename loop type
 op fmiEvent:_SU:_ : FMIActionType PortId -> Action [ctor format(nir! d d d d)] .
 op portEvent:_SU:_PId:_ : ActionType SUID OidSet -> Action [ctor format(nib! d d d d d d)] .
 op stepEvent:_StepSize:_ : SUID NzNat -> Action [ctor format(nig! d d d d)] .
 op complexEvent:_SaveSUs:_RestoreSUs:_Actions:_ : ComplexActionType OidSet OidSet ActionList -> Action [ctor format(niy! d d d d d d ni! niy!)] .
 
 *** Configuration fields
 op Algorithm:_ : ActionList -> Configuration [ctor format(nib! d d)] . 
 op Initialization:_ : ActionList -> Configuration [ctor format(nib! d d)] . 
 op Termination:_ : ActionList -> Configuration [ctor format(nib! d d)] . 

 op SNSet:_ : OidSet -> Configuration [ctor format(ni d d)] .
 op stepSize:_ : NzNat -> Configuration [ctor format(nig! d d)] . 
 op endTime:_ : NzNat -> Configuration [ctor format(nim! d d)] . 
 op UnsolvedSCC:_ : AlgebraicLoopSet -> Configuration [ctor format(nim! d d)] . 
 op SolvedSCC:_ : AlgebraicLoopSet -> Configuration [ctor format(nim! d d)] . 
 op guessOn:_ : PortSet -> Configuration [ctor format(nip! d d)] .
 op valuesToSet:_ : PortValueMap -> Configuration .

 *** Operations
 op _memberOf_ : EPortId AlgebraicLoopSet -> Bool . 
 op getSUs : PortSet OidSet -> OidSet .
 op emptyList : -> ActionList [ctor] .
 op _;_ : ActionList ActionList -> ActionList [ctor assoc id: emptyList] .

 var ID : SUID .
 var SUSet : OidSet .
 var LOOPS : AlgebraicLoopSet .
 var PORT : EPortId .
 var LOOPTYPE : LoopType .
 var PORTSET : PortSet .
 var PORTID : PortId .

 eq PORT memberOf ((AlgebraicLoop: (PORT , PORTSET)  Type: LOOPTYPE) , LOOPS) = true .
 eq PORT memberOf LOOPS = false [owise] .

 eq getSUs(empty, SUSet) = SUSet .
 ceq getSUs(((ID ! PORTID), PORTSET), SUSet) = getSUs(PORTSET, SUSet) if ID in SUSet .
 eq getSUs(((ID ! PORTID), PORTSET), SUSet) = getSUs(PORTSET, (ID , SUSet)) [owise] .

endom)


eof
(red getSUs((('SU2 ! 'R) , ('SU1 ! 'S), ('SU1 ! 'T)), empty) . )

(red getSUs(empty, empty) . )
