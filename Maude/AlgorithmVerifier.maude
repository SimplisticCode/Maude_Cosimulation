load cosim 

(omod AlgorithmVerifier is 
    protecting COSIMULATION .
    sorts SimulationState InstrumentationState .
    var OCH : Oid .
    vars RESTALGORITHM ALGO STEPNEGOALGO : ActionList .
    vars OUTPUTS INPUTS CONF CONF1 INITSTATE STATE : Configuration .
    vars OUTPUT INPUT : PortId .
    vars ID1 ID2 : SUID . 
    vars STEPSIZE FUTURETIME NEGOTIATEDSTEPSIZE ENDTIME : NzNat .
    vars TIME SUTIME INPUTTIME NATVALUE : Nat .
    var VALUE : FMIValue .
    var PORTVALUES : PortValueMap .
    vars FEEDTHROUGH SUIDs : OidSet .
    var SUIDsNE : NeOidSet . 
    var CONTRACT : Contract .
    vars SUINSTANCE ORCHESTRATOR : Object .
    var LOOPS : AlgebraicLoopSet .

    op run:_on:_ : Object Configuration -> SimulationState [ctor]. 
    op runAnyAlgorithm_ : Configuration -> SimulationState [ctor] .
    crl [runAnyAlg] : runAnyAlgorithm INITSTATE => run: ORCHESTRATOR on: INITSTATE 
        if LOOPS := tarjan(INITSTATE)
      /\ CONF := calculateSNSet(INITSTATE initialOrchestrationData(1,1,LOOPS)) 
      /\ {CONF} => { CONF1 } 
      /\ SUIDsNE := getSUIDsOfScenario(CONF)
      /\ ORCHESTRATOR := getOrchestrator(CONF1)
      /\ allSUsinUnloaded(SUIDsNE, CONF1) .

    ops findConst findInstr : Configuration -> InstrumentationState [ctor] .
    subsort Configuration < InstrumentationState .
    
    *** Everything that takes something frozen into something static should be frozen
    op allConstraintsDefined : Configuration -> Bool [frozen] .
    eq allConstraintsDefined(< ID1 : SU | inputs : (< INPUT : Input | contract : noContract > INPUTS) > CONF) = false .
    eq allConstraintsDefined(CONF) = true [owise] .

    rl [insr-delayed]: findInstr(< ID1 : SU | inputs : (< INPUT : Input | contract : noContract > INPUTS) > CONF)
                     =>
                       findInstr(< ID1 : SU | inputs : (< INPUT : Input | contract : delayed > INPUTS) > CONF) .

    rl [insr-reactive]: findInstr(< ID1 : SU | inputs : (< INPUT : Input | contract : noContract > INPUTS) > CONF)
                         =>
                        findInstr(< ID1 : SU | inputs : (< INPUT : Input | contract : reactive > INPUTS) > CONF) .

    crl [remove-findInstr]: findInstr(CONF) => CONF 
        if allConstraintsDefined(CONF) .

    ***op findInst( )
    ***ceq findInst()
        
    *** Find an implementation such that when it runs the algortihm it satisfies the property X
    ***op synthesizeInstrumentation : 
    crl [findInstrumentation]: findConst(INITSTATE) => CONF
        if findInstr(INITSTATE) => CONF
        /\ runAnyAlgorithm CONF => run: ORCHESTRATOR on: CONF1
        /\ positive(CONF1) .

    op positive : Configuration -> Bool .
    eq positive(CONF < "ctrl" : SU | inputs : (< "waterlevel" : Input | value : < NATVALUE > > INPUTS) >) = NATVALUE < 0 .
        
  *** FMI-standard fmistate transition:
  rl [setExp] : run: < OCH : OrchestrationData | Initialization : ((fmiEvent: CreateExp SUs: SUIDsNE) ; RESTALGORITHM) > on: < ID1 : SU | fmistate : Instantiated > CONF  
                => run: < OCH : OrchestrationData | Initialization : RESTALGORITHM > on: moveState(SUIDsNE, < ID1 : SU | > CONF, Instantiated, ExperimentSetup)  .

  rl [init] : run: < OCH : OrchestrationData | Initialization : ((fmiEvent: EnterInitialization SUs: SUIDsNE) ; RESTALGORITHM )> 
                on: < ID1 : SU | fmistate : ExperimentSetup > CONF       
           => run: < OCH : OrchestrationData | Initialization : RESTALGORITHM > 
                    on:  moveToInitialize(SUIDsNE, < ID1 : SU | > CONF)  .

  crl [simulate] : run: < OCH : OrchestrationData | Initialization : (fmiEvent: ExitInitialization SUs: SUIDsNE), valuesToSet : empty > 
                on:  < ID1 : SU | fmistate : Initialize > CONF  
                => run: < OCH : OrchestrationData | Initialization : emptyList >  
                on:  moveState(SUIDsNE, < ID1 : SU | > CONF, Initialize, Simulation) 
                if initializationDone(SUIDsNE, < ID1 : SU | fmistate : Initialize > CONF) .

  crl [terminate] : run: < OCH : OrchestrationData | endTime : TIME, Algorithm : emptyList, Termination : ((fmiEvent: Terminate SUs: SUIDsNE) ; RESTALGORITHM) >
                on: < ID1 : SU | time : ENDTIME, inputs : INPUTS , outputs : OUTPUTS , fmistate : Simulation > CONF 
                 => run: < OCH : OrchestrationData | Termination : RESTALGORITHM > 
                    on: moveState(SUIDsNE, < ID1 : SU | > CONF, Simulation, Terminated) 
                 if allDef(OUTPUTS, ENDTIME) and allDef(INPUTS, ENDTIME) .

  rl [free] : run: < OCH : OrchestrationData | Termination : ((fmiEvent: FreeInstance SUs: SUIDsNE) ; RESTALGORITHM) >
              on:  < ID1 : SU | fmistate : Terminated > CONF 
           => run: < OCH : OrchestrationData | Termination : RESTALGORITHM >
              on:  moveState(SUIDsNE, < ID1 : SU | > CONF, Terminated, InstanceFreed)  .

  rl [unload] : run: < OCH : OrchestrationData | Termination : ((fmiEvent: Unload SUs: SUIDsNE) ; RESTALGORITHM) >
                on:  < ID1 : SU | fmistate : InstanceFreed > CONF 
              => run: < OCH : OrchestrationData | Termination : RESTALGORITHM > 
                on:  moveState(SUIDsNE, < ID1 : SU | > CONF, InstanceFreed, Unloaded)  .

    *** Initialization
    crl [get-init] :
            run:  < OCH : OrchestrationData | Initialization : ((portEvent: Get SU: ID1 PId: OUTPUT) ; RESTALGORITHM), valuesToSet : PORTVALUES > 
            on: 
             < ID1 : SU | fmistate : Initialize, 
            outputs : (< OUTPUT : Output | status : Undef, value : VALUE, dependsOn : FEEDTHROUGH > OUTPUTS), 
                    inputs : INPUTS > 
                    (ID1 ! OUTPUT ==> ID2 ! INPUT) CONF
                => 
            run: < OCH : OrchestrationData | Initialization : RESTALGORITHM, valuesToSet : insert((ID2 ! INPUT), < 0 ; VALUE >, PORTVALUES) >
            on:  < ID1 : SU | outputs : (< OUTPUT : Output | status : Def > OUTPUTS) > 
                    (ID1 ! OUTPUT ==> ID2 ! INPUT) CONF             
            if feedthroughSatisfied(FEEDTHROUGH, INPUTS, 0) .


   *** Inputs can only rely on: one connection 
  rl [set-init] : 
    run: < OCH : OrchestrationData | Initialization : ((portEvent: Set SU: ID1 PId: INPUT)  ; RESTALGORITHM), valuesToSet : (((ID1 ! INPUT) |-> < TIME ; VALUE >), PORTVALUES) >
    on:  < ID1 : SU | inputs : (< INPUT : Input | status : Undef > INPUTS), fmistate : Initialize > CONF
    => 
    run: < OCH : OrchestrationData | Initialization : RESTALGORITHM, valuesToSet : PORTVALUES >
    on:  < ID1 : SU | inputs : (< INPUT : Input | time : TIME, status : Def, value : VALUE > INPUTS ) > CONF  .

    *** Simulation
    crl [get] : 
    run: < OCH : OrchestrationData | Algorithm : ((portEvent: Get SU: ID1 PId: OUTPUT) ; RESTALGORITHM), valuesToSet : PORTVALUES >
    on: CONF
     < ID1 : SU | outputs : (< OUTPUT : Output | time : TIME, status : Undef, value : VALUE, dependsOn : FEEDTHROUGH > OUTPUTS), inputs : INPUTS > 
                ( ID1 ! OUTPUT ==> ID2 ! INPUT)  
                => 
    run: < OCH : OrchestrationData | Algorithm : RESTALGORITHM, valuesToSet : (((ID2 ! INPUT) |-> < TIME ; VALUE >), PORTVALUES) >
    on: CONF < ID1 : SU | outputs : (< OUTPUT : Output | status : Def > OUTPUTS) > 
                ( ID1 ! OUTPUT ==> ID2 ! INPUT)
        if feedthroughSatisfied(FEEDTHROUGH, INPUTS, TIME) .
                
    crl [set] : 
    run: < OCH : OrchestrationData | Algorithm : ((portEvent: Set SU: ID1 PId: INPUT) ; RESTALGORITHM), valuesToSet : (((ID1 ! INPUT) |-> < TIME ; VALUE >), PORTVALUES) >
    on: CONF < ID1 : SU | time : SUTIME, fmistate : Simulation, inputs : (< INPUT : Input | contract : CONTRACT, time : INPUTTIME > INPUTS) >
            => 
    run: < OCH : OrchestrationData | Algorithm : RESTALGORITHM, valuesToSet : PORTVALUES >
    on: CONF < ID1 : SU | inputs : (< INPUT : Input | time : TIME, value : VALUE > INPUTS) > 
    if ((CONTRACT == reactive and (TIME > INPUTTIME) and INPUTTIME == SUTIME) or (CONTRACT == delayed and TIME == SUTIME)) .

    crl [step-action] : 
            run: < OCH : OrchestrationData | Algorithm : ((stepEvent: ID1 StepSize: STEPSIZE) ; RESTALGORITHM) >
            on: CONF < ID1 : SU | time : TIME, inputs : INPUTS, outputs : OUTPUTS, fmistate : Simulation >
            => 
            run: < OCH : OrchestrationData | Algorithm : RESTALGORITHM >
            on: CONF stepAction(< ID1 : SU | >, STEPSIZE)
                if FUTURETIME := TIME + STEPSIZE
                /\ canStep(TIME, FUTURETIME, INPUTS, OUTPUTS) .
                *** /\ step(ID1, LOCALSTATE, INPUTS, STEPSIZE) => S':State .

endom)
    eof


(frew runAnyAlgorithm initConfiguration .)

( frew 
(run: (< "Orchestrator" : OrchestrationData | Algorithm :((
stepEvent: "ctrl" StepSize: 1);(
portEvent: Get SU: "ctrl" PId: "valveState");(
stepEvent: "tank" StepSize: 1);(
portEvent: Get SU: "tank" PId: "waterlevel");(
portEvent: Set SU: "ctrl" PId: "waterlevel");
portEvent: Set SU: "tank" PId: "valveState"),Initialization :((
fmiEvent: CreateExp SUs:("ctrl", "tank"));(
fmiEvent: EnterInitialization SUs:("ctrl", "tank"));(
portEvent: Get SU: "tank" PId: "waterlevel");(
portEvent: Set SU: "ctrl" PId: "waterlevel");(
portEvent: Get SU: "ctrl" PId: "valveState");(
portEvent: Set SU: "tank" PId: "valveState");
fmiEvent: ExitInitialization SUs:("ctrl", "tank")),SNSet : empty,Termination :((
fmiEvent: Terminate SUs:("ctrl", "tank"));(
fmiEvent: FreeInstance SUs:("ctrl", "tank"));
fmiEvent: Unload SUs:("ctrl", "tank")),actualStepSize : 1,defaultStepSize : 1,endTime : 1,guessOn : empty,simulationTime : 0,solvedSCC : empty,unsolvedSCC : empty,valuesToSet : empty >)
on: (("ctrl" ! "valveState" ==> "tank" ! "valveState")(
"tank" ! "waterlevel" ==> "ctrl" ! "waterlevel")< "ctrl" : SU | canReject : false,fmistate : Instantiated,inputs : < "waterlevel" : Input |
    contract : delayed,status : Undef,time : 0,type : integer,value : < 0 > >,outputs : < "valveState" : Output | dependsOn : empty,status :
    Undef,time : 0,type : integer,value : < 0 > >,parameters : none,path : "",time : 0 > < "tank" : SU | canReject : false,fmistate :
    Instantiated,inputs : < "valveState" : Input | contract : delayed,status : Undef,time : 0,type : integer,value : < 0 > >,outputs : <
    "waterlevel" : Output | dependsOn : empty,status : Undef,time : 0,type : integer,value : < 0 > >,parameters : none,path : "",time : 0 >)
    ) .)


*** find Insrumentations
( search findConst(initConfiguration) =>! C:Configuration . )
( frew findConst(initConfigurationUninstrumented) . )

( search findConst(initConfigurationUninstrumented) =>! C:Configuration . )

*** Deterministic
*** Go from an initial configuration to search for  
***Run any algorithm - show determinism
( search (runAnyAlgorithm initConfiguration)  =>! S:SimulationState . )

*** Search for bad states - safety properties
( search (runAnyAlgorithm initConfiguration) =>* run: O:Object on: (C:Configuration 
                < "tank" : SU | outputs : < "waterlevel" : Output | value : < 213 > > > ) . )

*** Somwthing good will happen
( search (runAnyAlgorithm initConfiguration) =>* run: O:Object on: (C:Configuration 
                < "tank" : SU | outputs : < "waterlevel" : Output | value : < 2546248239 > > > ) . )

              
    *** Next step look at Complex scenarios
    crl [step-negotiation] : 
                Algorithm: (
                    (complexEvent: StepNegotiation SaveSUs: SUIDsNENE RestoreSUs: SUIDsNENE Actions: ALGO) ; RESTALGORITHM)
                => Algorithm: RESTALGORITHM  .
     


(frew findInstr(< "ctrl" : SU | canReject : false,fmistate : Instantiated,inputs : < "waterlevel" : Input |
    contract : noContract,status : Undef,time : 0,type : integer,value : < 0 > >,outputs : < "valveState" : Output | dependsOn : empty,
    status : Undef,time : 0,type : integer,value : < 0 > >,parameters : none,path : "",time : 0 >
     < "tank" : SU | canReject : false,fmistate
    : Instantiated,inputs : < "valveState" : Input | contract : noContract,status : Undef,time : 0,type : integer,value : < 0 > >,outputs :
    < "waterlevel" : Output | dependsOn : empty,status : Undef,time : 0,type : integer,value : < 0 > >,parameters : none,path : "",time : 0
    >) .)
endom)