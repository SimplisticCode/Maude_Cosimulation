load file

fmod PORTID is
 protecting QID .
 sort PortId .
 subsorts Qid < PortId < Oid .
endfm

view OIdAsTRIV from TRIV to PORTID is
  protecting PORTID .
  sort Elt to PortId .
endv
     
fmod MAYBE{X :: TRIV} is 
 sort Maybe{X} . 
 subsort X$Elt < Maybe{X} . 
 op maybe : -> Maybe{X} [ctor] . 
endfm
     
mod COPY-FILE is 
 including FILE . 
 protecting (MAYBE * (op maybe to null)){Oid} . 
 op myClass : -> Cid . 
 op myObj : -> Oid . 
 ops in:_ out:_ : Maybe{Oid} -> Attribute . 
 ops inFile:_ outFile:_ : String -> Attribute . 
 
 op run : String String -> Configuration . 
 vars Text Original Copy : String . 
 vars FHIn FHOut : Oid . 
 var Attrs : AttributeSet . 
 
 eq run(Original, Copy) 
  = <> 
   < myObj : myClass | in: null, inFile: Original, 
      out: null, outFile: Copy > 
   openFile(fileManager, myObj, Original, "r") . 
 
 rl < myObj : myClass | in: null, outFile: Copy, Attrs > 
   openedFile(myObj, fileManager, FHIn) 
 => < myObj : myClass | in: FHIn, outFile: Copy, Attrs > 
   openFile(fileManager, myObj, Copy, "w") . 
 rl < myObj : myClass | in: FHIn, out: null, Attrs > 
   openedFile(myObj, fileManager, FHOut) 
 => < myObj : myClass | in: FHIn, out: FHOut, Attrs > 
   getLine(FHIn, myObj) . 
 rl < myObj : myClass | in: FHIn, out: FHOut, Attrs > 
   gotLine(myObj, FHIn, Text) 
 => < myObj : myClass | in: FHIn, out: FHOut, Attrs > 
   if Text == "" 
   then closeFile(FHIn, myObj) 
       closeFile(FHOut, myObj) 
   else write(FHOut, myObj, Text) 
   fi . 
 rl < myObj : myClass | in: FHIn, out: FHOut, Attrs > 
   wrote(myObj, FHOut) 
 => < myObj : myClass | in: FHIn, out: FHOut, Attrs > 
   getLine(FHIn, myObj) . 
 rl < myObj : myClass | in: FHIn, out: FHOut, Attrs > 
   closedFile(myObj, FHIn) 
   closedFile(myObj, FHOut) 
 => none . 
endm

erew run("scenario1.txt", "out.txt") .