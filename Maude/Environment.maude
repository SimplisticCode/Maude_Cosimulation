load StepFinder 

(fmod ENVIRONMENT is
  protecting SCC-MAP + INDEX-MAP + SimulationUnit .
  sort Environment .
  op env : PortList SCCMap Nat Nat IndexMap -> Environment [ctor] .
    *** Get fields in Environment
    op getSN : Environment -> Nat .
    op getSCCN : Environment -> Nat .
    op getStack : Environment -> PortList .
    op getSCC : Environment -> SCCMap .
    op getIM : Environment -> IndexMap .

    var IM : IndexMap .
    var STACK : PortList .
    var SCCs : SCCMap .
    vars INDEX SCCNUMBER : Nat .

    *** Projection function
    eq getStack(env(STACK, SCCs, INDEX, SCCNUMBER, IM)) = STACK .
    eq getSN(env(STACK, SCCs, INDEX, SCCNUMBER, IM)) = INDEX .
    eq getSCC(env(STACK, SCCs, INDEX, SCCNUMBER, IM)) = SCCs .
    eq getIM(env(STACK, SCCs, INDEX, SCCNUMBER, IM)) = IM .
    eq getSCCN(env(STACK, SCCs, INDEX, SCCNUMBER, IM)) = SCCNUMBER .

endfm) 

(view ENVAsTRIV from TRIV to ENVIRONMENT is
  sort Elt to Environment .
endv)

(fmod DFSResult-PAIR is
    protecting PAIR{ENVAsTRIV, Nat} * (sort Pair{ENVAsTRIV, Nat} to DFSPair) .
endfm) 


(omod ScenarioEnvironment is
    protecting SimulationUnit +  PORTLIST-PAIR + DFSResult-PAIR .
    op findSuccesors : EPortId Configuration -> PortSet .
    op succesors : EPortId Configuration PortSet -> PortSet .
    op split : EPortId PortList PortListPair -> PortListPair .
    op addStackIncr : EPortId Environment -> Environment .
    op createIndexMap : PortSet IndexMap -> IndexMap .

    *** Projection functions
    op getLoops : Environment Configuration -> AlgebraicLoopSet .
    op isReactiveLoop : PortSet Configuration -> Bool .

    op nodeHasBeenVisited : EPortId Environment -> Bool .
    op createAlgebraic : SCCMap Configuration AlgebraicLoopSet -> AlgebraicLoopSet .
    op setInfty : PortList IndexMap -> IndexMap .

    vars ID1 ID2 : SUID .
    vars INPUT OUTPUT : PortId .
    vars PORT : EPortId .
    var PORTSET : PortSet .
    var FT : OidSet .
    var IM : IndexMap .
    vars CONF INPUTS OUTPUTS : Configuration .
    vars STACK STACK1 STACK2 : PortList .
    vars SCCs : SCCMap .
    var LOOPS : AlgebraicLoopSet .
    var NONZERO : NzNat .
    vars M INDEX SCCNUMBER : Nat .
    var ENV : Environment .
    var PORTPAIR : PortListPair .

    *** Add the element to the stack, update the INDEX of the node and increments the counter
    eq addStackIncr(PORT, env(STACK, SCCs, INDEX, SCCNUMBER, ((PORT |-> M) , IM))) = env(PORT STACK, SCCs, (INDEX + 1), SCCNUMBER, insert(PORT, INDEX, IM)) .

    *** The node has been visited if its INDEX is non-zero
    eq nodeHasBeenVisited(PORT, env(STACK, SCCs, INDEX, SCCNUMBER, ((PORT |-> NONZERO) , IM))) = true .
    eq nodeHasBeenVisited(PORT, ENV) = false [owise] .
  
    *** Transform environment to Algebraic Loops
    eq getLoops(env(STACK, SCCs , INDEX, SCCNUMBER, IM), CONF) = createAlgebraic(SCCs, CONF, empty) .

    ***Encode everything as algebraic loops:
    *** No more SCC to look at
    eq createAlgebraic(empty, CONF, LOOPS) = LOOPS .
    ceq createAlgebraic(((INDEX |-> STACK), SCCs), CONF, LOOPS) = createAlgebraic(SCCs, CONF, ((AlgebraicLoop: PORTSET Type: R), LOOPS))  
        if PORTSET := elems(STACK, empty)
        /\ size(STACK) > 1 and isReactiveLoop(PORTSET, CONF) .

    ceq createAlgebraic(((INDEX |-> STACK), SCCs), CONF, LOOPS) = createAlgebraic(SCCs, CONF, ((AlgebraicLoop: PORTSET Type: F), LOOPS))  
        if PORTSET := elems(STACK, empty)
        /\ size(STACK) > 1 and not(isReactiveLoop(PORTSET, CONF)) .
    
    *** Trivial SCC should be forgotten
    eq createAlgebraic(((INDEX |-> PORTSET) , SCCs), CONF, LOOPS) = createAlgebraic(SCCs, CONF, LOOPS) [owise] .

    *** Check type of SCC - one reactive input makes it Reactive
    eq isReactiveLoop(((ID1 ! INPUT) , PORTSET), < ID1 : SU | inputs : (< INPUT : Input | contract : r > INPUTS) > CONF) = true .
    eq isReactiveLoop(PORTSET, CONF) = false [owise] .

    *** Sets all nodes in the stack to infinity - to ensure they do not interfere with the future calculations
    eq setInfty(nil, IM) = IM .
    eq setInfty(PORT STACK, ((PORT |-> NONZERO), IM)) = setInfty(STACK, insert(PORT, 100000, IM)) .

    *** Create the initial INDEX map - all INDEX are 0
    eq createIndexMap(empty, IM) = IM .
    eq createIndexMap((PORT , PORTSET), ((PORT |-> NONZERO) , IM)) = createIndexMap(PORTSET, insert(PORT, NONZERO, IM)) .
    eq createIndexMap((PORT , PORTSET), IM) = createIndexMap(PORTSET, insert(PORT, 0, IM)) [owise] .

    *** Splits the stack at PORT
    eq split(PORT, nil, PORTPAIR) = PORTPAIR . *** Nothing is on the stack
    ceq split(PORT, STACK, < STACK1 ; STACK2 > ) = < (STACK1 PORT) ; (tail(STACK) STACK2) > if PORT := head(STACK) .
    eq split(PORT, STACK, < STACK1 ; STACK2 > ) = split(PORT, tail(STACK), < STACK1 head(STACK) ; STACK2 > ) [owise] .

    *** Wrapper method
    eq findSuccesors(PORT, CONF) = succesors(PORT, CONF, empty) .

    *** Output
    ceq succesors(ID2 ! OUTPUT, 
                < ID1 : SU | inputs : (< INPUT : Input | > INPUTS) > 
                < ID2 : SU | outputs : (< OUTPUT : Output | > OUTPUTS) > 
                         (ID2 ! OUTPUT ==> ID1 ! INPUT) CONF, PORTSET) = 
                    succesors(ID2 ! OUTPUT, < ID1 : SU | > < ID2 : SU | > 
                            (ID2 ! OUTPUT ==> ID1 ! INPUT) CONF, ((ID1 ! INPUT) , PORTSET)) 
                    if not (ID1 ! INPUT) in PORTSET .

    *** Input - feed through
    ceq succesors((ID1 ! INPUT),
                    < ID1 : SU | inputs : (< INPUT : Input | > INPUTS), outputs : (< OUTPUT : Output | dependsOn : (INPUT , FT) > OUTPUTS) > CONF, PORTSET) 
                    = 
                    succesors((ID1 ! INPUT), < ID1 : SU | > CONF, ((ID1 ! OUTPUT) , PORTSET)) 
                    if not (ID1 ! OUTPUT) in PORTSET .

    *** Input - reactive
    ceq succesors((ID1 ! INPUT),
                < ID1 : SU | inputs : (< INPUT : Input | contract : r > INPUTS), outputs : (< OUTPUT : Output | > OUTPUTS) > CONF, PORTSET) 
                = succesors((ID1 ! INPUT), < ID1 : SU | > CONF, ((ID1 ! OUTPUT) , PORTSET)) if not (ID1 ! OUTPUT) in PORTSET .

    eq succesors(PORT, CONF, PORTSET) = PORTSET [owise] .
endom)