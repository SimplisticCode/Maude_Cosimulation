load SimulationUnit


(omod LOOPSolver is 
  protecting SimulationUnit .
    sorts Pair .

    op <_;_> : ActionList Configuration -> Pair [ctor] .
    op solveLoop : Configuration AlgebraicLoop  -> Configuration . 
    op breakLoop : PortSet Configuration LoopType -> Configuration .
    op containsCycle : AlgebraicLoopSet -> Bool . 
    op loopStep : PortSet  Configuration ActionList -> Pair .
    op solveLoopConf : Configuration AlgebraicLoop -> Configuration .
    op solveLoopAlgorithm : Configuration AlgebraicLoop -> ActionList .

    var LOOPS : AlgebraicLoopSet .  
    var LOOPTYPE : LoopType .
    vars CONF OUTPUTS INPUTS CONF1 : Configuration .
    vars INPUT OUTPUT : PortId .
    vars ID1 ID2 : SUID .
    vars PSet GSet : PortSet .
    vars ALGO LOOPSOLVINGALGO : ActionList .
    var TIME T1 : Nat .
    var VALUE : FMIValue .
    var STEP FUTURETIME : NzNat .
    var FEEDTHROUGH : OidSet  .
    var CONTRACT : Contract .
    var SUIDS : OidSet  .
    var SUINSTANCE : Object .
    var EVENT : Action .

    op fst : Pair -> ActionList .
    op snd : Pair -> Configuration .

    eq fst(< ALGO ; CONF >) = ALGO . 
    eq snd(< ALGO ; CONF >) = CONF . 

   *** Does the scenario contain any loop
   eq containsCycle(empty) = false .
   eq containsCycle(LOOPS) = true [owise] .

   ceq solveLoop(CONF Algorithm: ALGO, AlgebraicLoop: PSet Type: LOOPTYPE) = 
        CONF1 Algorithm: (ALGO ; LOOPSOLVINGALGO)
        if < LOOPSOLVINGALGO ; CONF1 > := loopStep(PSet, breakLoop(PSet, CONF, LOOPTYPE), emptyList) .

  eq solveLoopConf(CONF, AlgebraicLoop: PSet Type: LOOPTYPE) = snd(loopStep(PSet, breakLoop(PSet, CONF, LOOPTYPE), emptyList)) .

  ceq solveLoopAlgorithm(CONF, AlgebraicLoop: PSet Type: LOOPTYPE) = 
    complexEvent: Loop SaveSUs: SUIDS RestoreSUs: SUIDS Actions: fst(loopStep(PSet, breakLoop(PSet, CONF, LOOPTYPE), emptyList))
        if SUIDS := getSUs(PSet, empty) .

    *** Forget All Connections depending on type of loop 
    ceq breakLoop(((ID1 ! INPUT) , PSet),   
                     < ID1 : SU | inputs : (< INPUT : Input | contract : CONTRACT > INPUTS) > 
                     < ID2 : SU | outputs : (< OUTPUT : Output | > OUTPUTS) > 
                     (ID2 ! OUTPUT ==> ID1 ! INPUT) guessOn: GSet CONF, LOOPTYPE) = 
                        breakLoop(((ID1 ! INPUT) , PSet), < ID1 : SU | > < ID2 : SU | > guessOn: ((ID1 ! INPUT) , GSet) CONF, LOOPTYPE) 
                        if (LOOPTYPE == R and CONTRACT == r) or (LOOPTYPE == F and CONTRACT == d) .

    eq breakLoop(PSet, CONF, LOOPTYPE) = CONF [owise] .

    *** Set value using Guess
    ceq loopStep(((ID1 ! INPUT) , PSet), 
                      < ID1 : SU | time : TIME, inputs : (< INPUT : Input | time : T1, contract : CONTRACT > INPUTS) > 
                    guessOn: ((ID1 ! INPUT) , GSet) stepSize: STEP CONF, ALGO) = 
            loopStep(PSet, SUINSTANCE guessOn: GSet stepSize: STEP CONF, (ALGO ; EVENT)) 
                    if VALUE := < random(TIME) >
                    /\ FUTURETIME := T1 + STEP
                    /\ EVENT :=  portEvent: Set SU: ID1 PId: INPUT
                    /\ SUINSTANCE := setAction(< ID1 : SU | >, INPUT, VALUE, FUTURETIME)
                    /\ (CONTRACT == r and T1 == TIME) or (CONTRACT == d and TIME == FUTURETIME) .

    *** Set value on input
    ceq loopStep(((ID1 ! INPUT) , PSet), 
                      < ID1 : SU | inputs : (< INPUT : Input | time : TIME, contract : CONTRACT > INPUTS) > 
                      < ID2 : SU | outputs : (< OUTPUT : Output | value : VALUE, time : FUTURETIME, status : Def > OUTPUTS) > (ID2 ! OUTPUT ==> ID1 ! INPUT) CONF, ALGO) = 
              loopStep(PSet, SUINSTANCE < ID2 : SU | > (ID2 ! OUTPUT ==> ID1 ! INPUT) CONF, (ALGO ; EVENT)) 
                    if EVENT :=  portEvent: Set SU: ID1 PId: INPUT
                    /\ SUINSTANCE := setAction(< ID1 : SU | >, INPUT, VALUE, FUTURETIME)
                    /\ FUTURETIME > TIME .

    *** Get output value
    ceq loopStep(((ID1 ! OUTPUT) , PSet), 
                    < ID1 : SU | time : TIME, outputs : (< OUTPUT : Output | status : Undef, dependsOn : FEEDTHROUGH > OUTPUTS), inputs : INPUTS > CONF, ALGO) = 
                    loopStep(PSet, SUINSTANCE CONF, (ALGO ; EVENT)) 
                  if EVENT :=  portEvent: Get SU: ID1 PId: OUTPUT
                  /\ SUINSTANCE := getAction(< ID1 : SU | >, OUTPUT) 
                  /\ feedthroughSatisfied(FEEDTHROUGH, INPUTS, TIME) .

    *** Step
    ceq loopStep(((ID1 ! OUTPUT) , PSet), < ID1 : SU | time : TIME, outputs : OUTPUTS, inputs : INPUTS > stepSize: STEP CONF, ALGO) = 
                  loopStep(((ID1 ! OUTPUT) , PSet), SUINSTANCE stepSize: STEP CONF, (ALGO ; EVENT))
                  if EVENT := stepEvent: ID1 StepSize: STEP
                  /\ SUINSTANCE := stepAction(< ID1 : SU | >, STEP) 
                  /\ FUTURETIME := TIME + STEP
                  /\ canStep(TIME, FUTURETIME, INPUTS, OUTPUTS) .

    eq loopStep(empty,CONF, ALGO) = < ALGO ; CONF  > .

endom)
