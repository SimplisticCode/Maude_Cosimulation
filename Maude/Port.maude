load GenericDT

(omod Ports is 
 protecting QID + NAT + PORT-LIST + OID-SET + PORT-SET + PORTVALUEMAP .
 sorts Contract PortStatus Connection PortType .
 op _==>_ : EPortId EPortId -> Connection [ctor format(niy! d d d)] .
 subsort Connection < Configuration .

 sort Value .
 *** How to do the value type
 ***subsort Nat < Value .
 ***subsort Bool < Value .

 *** Values are currently natural numbers - maybe different types should be different syb-types
 class Port | value : Nat, type : PortType, time : Nat, status : PortStatus . 
 class Input | contract : Contract .
 class Output | dependsOn : OidSet .
 class Parameter | value : Value .
 subclasses Input Output < Port . 
 ops d r : -> Contract [ctor] .   *** d = delayed, r = Reactive.
 ops integer string real boolean : -> PortType [ctor] . 
 ops Def Undef : -> PortStatus [ctor] .

 op _in_ : Connection Configuration -> Bool . 
 op elems : PortList PortSet -> PortSet .
 op getPortFromMap : PortValueMap OidSet -> OidSet .

 var PID : PortId .
 var PORT  : EPortId .
 var CONF : Configuration .
 var CON : Connection .
 var STACK : PortList .
 var VALUE : PortValueAndTime .
 vars PORTMAP, PORTMAP1, PORTMAP2 : PortValueMap .
 var PORTIDSET : OidSet .
 var PORTSET : PortSet .

 eq elems(nil, PORTSET) = PORTSET .
 eq elems(PORT STACK, PORTSET) = elems(STACK, (PORT , PORTSET)) .

 eq CON in CON CONF = true .
 eq CON in CONF = false [owise] .

 eq getPortFromMap(empty, PORTIDSET) = PORTIDSET .
 eq getPortFromMap(((PID |-> VALUE) , PORTMAP), PORTIDSET) = getPortFromMap(PORTMAP, (PID , PORTIDSET)) .

    op _\_ : PortValueMap PortValueMap -> PortValueMap .
    eq PORTMAP \ empty = PORTMAP .
    eq PORTMAP1 \ PORTMAP2 = diffMap(PORTMAP1, PORTMAP2, empty) .

    op diffMap : PortValueMap PortValueMap PortValueMap -> PortValueMap .
    eq diffMap(empty, PORTMAP1, PORTMAP) = PORTMAP .
    eq diffMap(((PID |-> VALUE), PORTMAP1), PORTMAP2, PORTMAP) = 
        diffMap(PORTMAP1, PORTMAP2, if $hasMapping(PORTMAP2, PID) then PORTMAP else insert(PID, VALUE, PORTMAP) fi) .
endom)


eof



*** Test of methods
(red ('P ;; 'Q ;; 'S) .)
(red 'P in ('P ;; 'Q ;; 'S) .)
(red ('SU1 ! 'R) :: ('SU1 ! 'Q) :: ('SU1 ! 'S) . )
(red 'SU1!'P in ('SU1!'P ;; 'SU1!'Q ;; 'SU1!'S) .)
(red 'SU1!'P in ('SU1!'R ;; 'SU1!'Q ;; 'SU1!'S) .)

(red getPortFromMap(('P => 1) ;; ('Q => 1) ;; ('S => 1)) .)
(red ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)) . )
(red ('SU1 ! 'R) ;; ('SU1 ! 'Q) ;; ('SU1 ! 'S) . )

(red getPortIDSet(< 'A : Output | > none ) . )
(red elems(('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)) ) .)



(red take (indexOf(('SU1 ! 'R), ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)))) from ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)) . )

(red take 3 from ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)) . )
(red indexOf(('SU1 ! 'R), ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList))) . )

(red ('SU1 ! 'T) in elems(('SU1 ! 'R) (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList))) . )
(red length(('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList))) . )
