load GenericDT

(omod Ports is 
 protecting QID + NAT + PORTMAPENTRY + EPORTSET + OIDSET + PORTMAPSET + EPORTLIST + PORTSCC + PORTVALUEMAP .
 sorts Contract PortStatus Connection PortType .
 op _==>_ : EPortId EPortId -> Connection [ctor format(niy! d d d)] .
 subsort Connection < Configuration .

 *** Values are currently natural numbers - maybe different types should be different syb-types
 class Port | value : Nat, type : PortType, time : Nat, status : PortStatus . 
 class Input | contract : Contract .
 class Output | dependsOn : Set{OIdAsTRIV} .
 subclasses Input Output < Port . 
 ops d r : -> Contract [ctor] .   *** d = delayed, r = Reactive.
 ops integer string real boolean : -> PortType [ctor] . 
 ops Def Undef : -> PortStatus [ctor] .

 op _in_ : Connection Configuration -> Bool . 
 op elems : List{EPortIdAsTRIV} Set{EPortIdAsTRIV} -> Set{EPortIdAsTRIV} .
 op getPortFromMap : Set{PortValueMapEntryAsTRIV} Set{OIdAsTRIV} -> Set{OIdAsTRIV} .
 op indexOf : EPortId List{EPortIdAsTRIV} Nat -> Nat .

 var PID : PortId .
 vars PORT PORTX : EPortId .
 var CONF : Configuration .
 var CON : Connection .
 var STACK : List{EPortIdAsTRIV} .
 vars TIME VALUE : Nat .
 var PORTMAP : Set{PortValueMapEntryAsTRIV} .
 var PORTIDSET : Set{OIdAsTRIV} .
 var PORTSET : Set{EPortIdAsTRIV} .

*** Make stuff tail recursive
 eq elems(emptyList, PORTSET) = PORTSET .
 eq elems(PORT :: STACK, PORTSET) = elems(STACK, PORT ;; PORTSET) .

 eq indexOf(PORT, PORT :: STACK, VALUE) = 1 + VALUE .
 eq indexOf(PORT, PORTX :: STACK, VALUE) = indexOf(PORT, STACK, VALUE + 1) .
 eq indexOf(PORT, emptyList, VALUE) = 1 + VALUE .

 eq CON in CON CONF = true .
 eq CON in CONF = false [owise] .

 eq getPortFromMap(empty, PORTIDSET) = PORTIDSET .
 eq getPortFromMap((PID => < TIME ; VALUE >) ;; PORTMAP, PORTIDSET) = getPortFromMap(PORTMAP, PID ;; PORTIDSET) .

endom)


eof

(red ('P ;; 'Q ;; 'S) .)
(red 'P in ('P ;; 'Q ;; 'S) .)
(red ('SU1 ! 'R) :: ('SU1 ! 'Q) :: ('SU1 ! 'S) . )
(red 'SU1!'P in ('SU1!'P ;; 'SU1!'Q ;; 'SU1!'S) .)
(red 'SU1!'P in ('SU1!'R ;; 'SU1!'Q ;; 'SU1!'S) .)

(red getPortFromMap(('P => 1) ;; ('Q => 1) ;; ('S => 1)) .)
(red ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)) . )
(red ('SU1 ! 'R) ;; ('SU1 ! 'Q) ;; ('SU1 ! 'S) . )

(red getPortIDSet(< 'A : Output | > none ) . )
(red elems(('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)) ) .)



(red take (indexOf(('SU1 ! 'R), ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)))) from ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)) . )

(red take 3 from ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList)) . )
(red indexOf(('SU1 ! 'R), ('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList))) . )

(red ('SU1 ! 'T) in elems(('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList))) . )
(red length(('SU1 ! 'R) :: (('SU1 ! 'S) :: (('SU1 ! 'T) :: emptyList))) . )
