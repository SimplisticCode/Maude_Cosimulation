load ScenarioAnalyser

(omod SCENARIO is 
   protecting ScenarioAnalyser .
    sort GlobalState .

    *** Definition of system
    op externalConnection : ->  Configuration .    *** External Connections - all ports have unique name
    op simulationUnits : -> Configuration .      *** SUs - ID * input ports * and outputs
    op scenario : Configuration Configuration -> Configuration . 
    op validScenario : Configuration Configuration -> Bool .
    op setup : -> GlobalState .
    op `{_`} : Configuration -> GlobalState .
    op calculateSNSet : Configuration -> Configuration .

  vars ID1 ID2 : SUID .
  vars INPUT OUTPUT : PortId .
  vars SUs CONNECTIONS INPUTS OUTPUTS CONF SCENARIOMODEL : Configuration .
  var SUIDs : Set{OIdAsTRIV} .
  var TYPE : PortType .
  var SCCs : Set{ALGEBRAICLOOPAsTRIV} .

  eq validScenario((ID1 ! OUTPUT ==> ID2 ! INPUT ) CONNECTIONS,  < ID1 : SU | outputs : < OUTPUT : Output | type : TYPE > OUTPUTS > < ID2 : SU | inputs : < INPUT : Input | type : TYPE > INPUTS > SUs) = validScenario(CONNECTIONS, < ID1 : SU | > < ID2 : SU | > SUs) .
  eq validScenario(none, SUs) = true .
  eq validScenario(CONNECTIONS, SUs) = false [owise] .

  *** Calculation of the members of the set of SUs that should be backtracked in the step negotiation
  ceq calculateSNSet(< ID1 : SU | inputs : (< INPUT : Input | contract : r > INPUTS) > 
                      < ID2 : SU | outputs : (< OUTPUT : Output | > OUTPUTS) > 
                      (ID2 ! OUTPUT ==> ID1 ! INPUT) (SNSet: (ID1 ;; SUIDs))  CONF) = 
                      calculateSNSet(< ID1 : SU | > < ID2 : SU | > (ID2 ! OUTPUT ==> ID1 ! INPUT) 
                      (SNSet: (ID1 ;; ID2 ;; SUIDs)) CONF) 
                      if not ID2 in SUIDs .
  
  ceq calculateSNSet(< ID1 : SU | canReject : true > (SNSet: SUIDs) CONF ) = 
        calculateSNSet(< ID1 : SU | > (SNSet: (ID1 ;; SUIDs)) CONF )
                                         if not ID1 in SUIDs .                                    
  eq calculateSNSet(CONF) = CONF [owise] .


  ***Encoding of the Scenario 
eq externalConnection = ('env ! 'psu ==> 'plant ! 'psu) ('env ! 'ref ==> 'ctrl ! 'ref) ('load ! 'xaft ==> 'ctrl ! 'xaft) ('ctrl ! 'o ==> 'plant ! 'o) ('plant ! 'w ==> 'ctrl ! 'w) ('load ! 'x ==> 'plant ! 'x) ('load ! 'v ==> 'plant ! 'v) ('plant ! 'f ==> 'load ! 'f) .

eq simulationUnits = (< 'env : SU | path : "A" , time : 0, inputs : none, outputs : (< 'ref : Output | value : 0, type : integer, time : 0, status : Undef, dependsOn : empty >) (< 'psu : Output | value : 0, type : integer, time : 0, status : Undef, dependsOn : empty >), state : Instantiated, canReject : false >)

 	 (< 'load : SU | path : "A" , time : 0, inputs : (< 'f : Input | value : 0, type : integer, time : 0, contract : d, status : Undef  >), outputs : (< 'v : Output | value : 0, type : integer, time : 0, status : Undef, dependsOn : empty >) (< 'xaft : Output | value : 0, type : integer, time : 0, status : Undef, dependsOn : empty >) (< 'x : Output | value : 0, type : integer, time : 0, status : Undef, dependsOn : empty >), state : Instantiated, canReject : false >)

 	 (< 'ctrl : SU | path : "A" , time : 0, inputs : (< 'ref : Input | value : 0, type : integer, time : 0, contract : d, status : Undef  >) (< 'w : Input | value : 0, type : integer, time : 0, contract : d, status : Undef  >) (< 'xaft : Input | value : 0, type : integer, time : 0, contract : d, status : Undef  >), outputs : (< 'o : Output | value : 0, type : integer, time : 0, status : Undef, dependsOn : empty >), state : Instantiated, canReject : false >)

 	 (< 'plant : SU | path : "A" , time : 0, inputs : (< 'x : Input | value : 0, type : integer, time : 0, contract : r, status : Undef  >) (< 'v : Input | value : 0, type : integer, time : 0, contract : r, status : Undef  >) (< 'o : Input | value : 0, type : integer, time : 0, contract : d, status : Undef  >) (< 'psu : Input | value : 0, type : integer, time : 0, contract : r, status : Undef  >), outputs : (< 'w : Output | value : 0, type : integer, time : 0, status : Undef, dependsOn : ( 'v ) >) (< 'f : Output | value : 0, type : integer, time : 0, status : Undef, dependsOn : ( 'v ;; 'x ) >), state : Instantiated, canReject : false >) .

  ceq scenario(CONNECTIONS, SUs) = CONNECTIONS SUs 
    if validScenario(CONNECTIONS, SUs) .

  eq scenario(CONNECTIONS, SUs) = none [owise] .

  ceq setup = { CONF }
    if SCENARIOMODEL := scenario(externalConnection, simulationUnits)
    /\ SCCs := tarjan(SCENARIOMODEL)
    /\ CONF := calculateSNSet(SCENARIOMODEL stepSize: 1 endTime: 1 Algorithm: emptyList Termination: emptyList Initialization: emptyList SNSet: empty guessOn: empty SolvedSCC: empty UnsolvedSCC: SCCs valuesToSet: empty) .
   
endom)