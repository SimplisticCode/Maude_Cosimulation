load ScenarioAnalyser

(omod SCENARIO is 
   protecting ScenarioAnalyser + FMIVALUESET .
    sorts GlobalState ChooseValue .

  *** Definition of the scenario
  *** External Connections - all ports have unique name
  op externalConnection : ->  Configuration .    
  ops simulationUnitsNotInstrumented simulationUnits : -> Configuration .      *** SUs - ID * input ports * and outputs
  op simulationUnitsNotInitialized : -> [Configuration] .
  op scenario : Configuration Configuration -> Configuration . 
  op validScenario : Configuration Configuration -> Bool .
  op setup : -> GlobalState .
  op `{_`} : Configuration -> GlobalState .
  op calculateSNSet : Configuration -> Configuration .
  op getSUsOfScenario : Configuration -> Configuration .
  op getSUIDsOfScenario : Configuration -> OidSet .

  vars OCH SU1 SU2 INPUT OUTPUT : Oid .
  vars SUs CONNECTIONS INPUTS OUTPUTS CONF SCENARIOMODEL : Configuration .
  var SUIDs : OidSet .
  var NeSUIDs : NeOidSet .
  var TYPE : PortType .
  var LOOPS : AlgebraicLoopSet .
  vars NATVALUE HIGH LOW WATERLEVEL WATERLEVELOUT VALVESTATE TIME : Nat .
  var BOOLVALUE : Bool .
  var STEPSIZE : NzNat .
  var VALUE : FMIValue .
  var FMIVALUESET : FMIValueSet .
  var PORTSTATUS : PortStatus .

  eq getSUsOfScenario(< SU1 : SU | > CONF) = < SU1 : SU | > getSUsOfScenario(CONF) .
  eq getSUsOfScenario(CONF) = none [owise] .

  eq getSUIDsOfScenario(< SU1 : SU | > CONF) = (SU1, getSUIDsOfScenario(CONF)) .
  eq getSUIDsOfScenario(CONF) = empty [owise] .

  *** One to one check - change into different input types
  eq validScenario((SU1 ! OUTPUT ==> SU2 ! INPUT ) CONNECTIONS,  
  < SU1 : SU | outputs : < OUTPUT : Output | type : TYPE > OUTPUTS > 
  < SU2 : SU | inputs : < INPUT : Input | type : TYPE > INPUTS > SUs) 
  = validScenario(CONNECTIONS, < SU1 : SU | > < SU2 : SU | > SUs) .
  eq validScenario(none, SUs) = true .
  eq validScenario(CONNECTIONS, SUs) = false [owise] .
  *** Only one output per input

  *** Calculation of the members of the set of SUs that should be backtracked in the step negotiation
  ceq calculateSNSet(< SU1 : SU | inputs : (< INPUT : Input | contract : reactive > INPUTS) > 
                     < SU2 : SU | outputs : (< OUTPUT : Output | > OUTPUTS) > 
                      (SU2 ! OUTPUT ==> SU1 ! INPUT) 
                      < OCH : SimulationData | SNSet : (SU1 , SUIDs) > 
                      CONF) = 
                      calculateSNSet(< SU1 : SU | > < SU2 : SU | > (SU2 ! OUTPUT ==> SU1 ! INPUT) 
                      < OCH : SimulationData | SNSet : (SU1 , SU2 , SUIDs) > 
                      CONF) 
                      if not SU2 in SUIDs .
  
  ceq calculateSNSet(< SU1 : SU | canReject : true > 
                      < OCH : SimulationData | SNSet : SUIDs > CONF ) = 
        calculateSNSet(< SU1 : SU | > < OCH : SimulationData | SNSet : (SU1 , SUIDs) > CONF )
                                         if not SU1 in SUIDs .                             
  eq calculateSNSet(CONF) = CONF [owise] .

  op choose : FMIValueSet -> ChooseValue [ctor] .
  rl [choose-value] : choose((VALUE, FMIVALUESET)) => VALUE .
  subsort FMIValue < ChooseValue .

  ***Encoding of the Scenario 
  *** Coupling or connections
eq externalConnection = ("tank" ! "waterlevel" ==> "ctrl" ! "waterlevel") ("ctrl" ! "valveState" ==> "tank" ! "valveState") .

eq simulationUnits =   (< "tank" : SU | path : "", parameters : ("flow" |-> < 100 >), localState : ( "waterlevel" |-> < 0 > ) , time : 0, inputs : (< "valveState" : Input | value : < 0 >, type : integer, time : 0, contract : delayed, status : Undef  >), outputs : (< "waterlevel" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >)

  (< "ctrl" : SU | path : "", parameters : (("high" |-> < 5 >) , ("low" |-> < 0 >)), localState : ( "valve" |-> < false >), time : 0, inputs : (< "waterlevel" : Input | value : < 0 >, type : integer, time : 0, contract : delayed, status : Undef  >), outputs : (< "valveState" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >) .

eq simulationUnitsNotInstrumented = 
  (< "tank" : SU | path : "", parameters : ("flow" |-> < 100 >), localState : ( "waterlevel" |-> < 0 > ) , time : 0, inputs : (< "valveState" : Input | value : < 0 >, type : integer, time : 0, contract : noContract, status : Undef  >), outputs : (< "waterlevel" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >)

  (< "ctrl" : SU | path : "", parameters : (("high" |-> < 5 >) , ("low" |-> < 0 >)), localState : ( "valve" |-> < false > ), time : 0, inputs : (< "waterlevel" : Input | value : < 0 >, type : integer, time : 0, contract : noContract, status : Undef  >), outputs : (< "valveState" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >) .

eq simulationUnitsNotInitialized =  
  (< "tank" : SU | path : "", parameters : ("flow" |-> choose((< 1 >,< 2 >,< 30 >))), localState : ( "waterlevel" |-> < 0 > ) , time : 0, inputs : (< "valveState" : Input | value : < 0 >, type : integer, time : 0, contract : delayed, status : Undef  >), outputs : (< "waterlevel" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >)

  (< "ctrl" : SU | path : "", parameters : (("high" |-> choose((< 20 >))) , ("low" |-> < 0 >)), localState : ( "valve" |-> < false >), time : 0, inputs : (< "waterlevel" : Input | value : < 0 >, type : integer, time : 0, contract : delayed, status : Undef  >), outputs : (< "valveState" : Output | value : < 0 >, type : integer, time : 0, status : Undef, dependsOn : empty >), fmistate : Instantiated, canReject : false >) .

*** COULD be Stream lined
*** Todo make Dostep for the different SUs
eq step(< "ctrl" : SU | time : TIME, parameters : (("high" |-> < HIGH >) , ("low" |-> < LOW >)), 
                      inputs : < "waterlevel" : Input | value : < NATVALUE > >, 
                      outputs : < "valveState" : Output | value : < VALVESTATE >, time : TIME, status : PORTSTATUS >,
                      localState : ( "valve" |-> < BOOLVALUE > ) >,
                      STEPSIZE) = 
  if NATVALUE > HIGH then
    < "ctrl" : SU | time : (TIME + STEPSIZE), localState : ( "valve" |-> < true > ), 
          outputs : < "valveState" : Output | value : < 1 >, time : (TIME + STEPSIZE), status : Undef > >
    else 
    if NATVALUE < LOW then
      < "ctrl" : SU | time : (TIME + STEPSIZE), localState : ( "valve" |-> < false > ), 
          outputs : < "valveState" : Output | value : < 0 >, time : (TIME + STEPSIZE), status : Undef > >
    else
      < "ctrl" : SU | time : (TIME + STEPSIZE), 
                outputs : < "valveState" : Output | time : (TIME + STEPSIZE), status : Undef > >
  fi
fi .

eq step(< "tank" : SU | time : TIME, parameters : ("flow" |-> < NATVALUE >), 
                      inputs : < "valveState" : Input | value : < VALVESTATE > >, 
                      outputs : < "waterlevel" : Output | value : < WATERLEVELOUT >, time : TIME, status : PORTSTATUS >,
                      localState : ( "waterlevel" |-> < WATERLEVEL > ) >,
                      STEPSIZE) = 
  if VALVESTATE == 1 then 
    *** Open goes to zero
      < "tank" : SU | time : (TIME + STEPSIZE), localState : ( "waterlevel" |-> < 0 > ),
          outputs : < "waterlevel" : Output | value : < 0 >, time : (TIME + STEPSIZE), status : Undef > >
    else 
      < "tank" : SU | time : (TIME + STEPSIZE), localState : ( "waterlevel" |-> < WATERLEVEL + (STEPSIZE * NATVALUE) > ), outputs : < "waterlevel" : Output | value : < WATERLEVEL + (STEPSIZE * NATVALUE) >, time : (TIME + STEPSIZE), status : Undef > > 
  fi .


ceq scenario(CONNECTIONS, SUs) = CONNECTIONS SUs 
    if validScenario(CONNECTIONS, SUs) .

  eq scenario(CONNECTIONS, SUs) = none [owise] .

  ceq setup = { CONF }
    if SCENARIOMODEL := scenario(externalConnection, simulationUnits)
    /\ LOOPS := tarjan(SCENARIOMODEL)
    /\ NeSUIDs := getSUIDsOfScenario(SCENARIOMODEL)
    /\ CONF := calculateSNSet(SCENARIOMODEL initialOrchestrationData(1,LOOPS, NeSUIDs)) .
    
  op init : -> GlobalState .
  eq init = { scenario(externalConnection, simulationUnits) } .

  ops initConfiguration initConfigurationUninstrumented initConfDSE : -> Configuration .
  eq initConfiguration = scenario(externalConnection, simulationUnits) .
  eq initConfigurationUninstrumented = scenario(externalConnection, simulationUnitsNotInstrumented) .
  eq initConfDSE = externalConnection simulationUnitsNotInitialized .

  op isInitialState : Configuration -> Bool .
  eq isInitialState(CONF < OCH : SimulationData | >) = false .
  eq isInitialState(CONF) = true [owise] .
   
endom)
eof

( red getAllPorts(scenario(externalConnection, simulationUnits), empty) .)

( red tarjan(scenario(externalConnection, simulationUnits)) . )

( red validScenario(externalConnection, simulationUnits) . )