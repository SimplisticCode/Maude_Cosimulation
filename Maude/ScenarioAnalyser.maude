load Environment 

(omod ScenarioAnalyser is
    protecting ScenarioEnvironment .
    op loopsInStepNegotiation : AlgebraicLoopSet OidSet Configuration AlgebraicLoopSet -> AlgebraicLoopSet .
    op tarjan : Configuration -> AlgebraicLoopSet .
    op dfs : PortSet Environment Configuration -> DFSPair .
    op dfs1 : EPortId Environment Configuration -> DFSPair .

    var PORT : EPortId .
    vars REACTIVEPORTS PORTSET SUCCESORS : PortSet .
    var IM : IndexMap .
    var CONF : Configuration .
    var SCCs : SCCMap .
    vars VISITED VISITED1 VISITED2  : NzNat .
    vars SCCNUMBER INDEX : Nat .
    vars ENV ENV1 ENV2 : Environment .
    vars OLDSTACK STACK SCCSTACK : PortList .
    vars LOOPS LOOPSet : AlgebraicLoopSet .
    vars SUIDs REACTIVESUs : OidSet .
    var SU : SUID .
    var LOOP : AlgebraicLoop .

    eq loopsInStepNegotiation(empty, SUIDs, CONF, LOOPSet) = LOOPSet .
    eq loopsInStepNegotiation(LOOPS, empty, CONF, LOOPSet) = LOOPSet .
    ceq loopsInStepNegotiation(((AlgebraicLoop: PORTSET Type: R) , LOOPS), (SU , SUIDs), CONF, LOOPSet) = 
            loopsInStepNegotiation(LOOPS, (SU , SUIDs), CONF, ((AlgebraicLoop: PORTSET Type: R) , LOOPSet))
        if REACTIVEPORTS := getAllReactivePorts(CONF, empty)
        /\ REACTIVESUs := getSUs(REACTIVEPORTS, empty)
        /\ SU in REACTIVESUs .

    eq loopsInStepNegotiation((LOOP , LOOPS), SUIDs, CONF, LOOPSet) = 
        loopsInStepNegotiation(LOOPS, SUIDs, CONF, LOOPSet) [owise] .

    ceq tarjan(CONF) = getLoops(ENV1, CONF)
       if < ENV1 ; INDEX > := dfs(getAllPorts(CONF, empty), env(nil, empty, 1, 0, createIndexMap(getAllPorts(CONF, empty), empty)), CONF) .

    *** PORT has been visisted before - VISITED is non-zero!
    ceq dfs((PORT , PORTSET), env(STACK, SCCs, INDEX, SCCNUMBER, ((PORT |-> VISITED), IM)), CONF) = < ENV ; min(VISITED, VISITED1) > 
       if < ENV ; VISITED1 > := dfs(PORTSET, env(STACK, SCCs, INDEX, SCCNUMBER, ((PORT |-> VISITED) , IM)), CONF) .

    *** Dead end - no successor!
    eq dfs(empty, ENV, CONF) = < ENV ; 100000 > .

    *** PORT has not been visited before - none of the other cases match
    ceq dfs((PORT, PORTSET), ENV, CONF) = < ENV2 ; min(VISITED1, VISITED2) >
        if < ENV1 ; VISITED1 > := dfs1(PORT, ENV, CONF) 
        /\ < ENV2 ; VISITED2 > := dfs(PORTSET, ENV1, CONF) [owise] .

    *** If we can find a Node with a lower index we use the lower index
    ceq dfs1(PORT, ENV, CONF) = dfs(SUCCESORS, ENV1, CONF)
        if SUCCESORS := findSuccesors(PORT, CONF) 
           /\ ENV1 := addStackIncr(PORT, ENV) 
           /\ < ENV2 ; INDEX > := dfs(SUCCESORS, ENV1, CONF) 
           /\ INDEX < getSN(ENV) .
            
    *** If we cannot find a Node with a lower index
    ceq dfs1(PORT, ENV, CONF) = 
        < env(OLDSTACK, insert(SCCNUMBER, SCCSTACK, SCCs), INDEX, SCCNUMBER + 1, setInfty(SCCSTACK, IM)) ; 100000 >
                if SUCCESORS := findSuccesors(PORT, CONF) 
                /\ ENV1 := addStackIncr(PORT, ENV) 
                /\ < env(STACK, SCCs, INDEX, SCCNUMBER, IM) ; VISITED > := dfs(SUCCESORS, ENV1, CONF) 
                /\ < SCCSTACK ; OLDSTACK >  := split(PORT, STACK, < nil ; nil > ) [owise] .   

endom)

eof


(red split(('SU1 ! 'S), ('SU1 ! 'R) ('SU1 ! 'S) ('SU1 ! 'T), < nil ; nil > ) . )

(red elems(('SU1 ! 'R) ('SU1 ! 'S) ('SU1 ! 'T), empty) . )

( frew [100] setup . )

( red tarjan(simulationUnits externalConnection) . )


( red findSuccesors(('msd1 ! 'x1), simulationUnits externalConnection) .)

( red min(1000, 1) .)

( red getAllPorts((simulationUnits externalConnection), empty) . )

( red dfs(getAllPorts((simulationUnits externalConnection), empty), env(nil, empty, 1, 0, createIndexMap(getAllPorts((simulationUnits externalConnection), empty), empty)), (simulationUnits externalConnection)) . )

(red dfs1(('msd1 ! 'fk), env(nil, empty, 1, 0,  ('msd1 ! 'fk |-> 0, 'msd1 ! 'v1 |-> 0, 'msd1 ! 'x1 |-> 0, 'msd1 ! 'z |-> 0, 'msd2 ! 'fk |->
    0, 'msd2 ! 'v1 |-> 0, 'msd2 ! 'x1 |-> 0, 'msd2 ! 'z |-> 0)), (
'msd1 ! 'v1 ==> 'msd2 ! 'v1)(
'msd1 ! 'x1 ==> 'msd2 ! 'x1)(
'msd1 ! 'z ==> 'msd2 ! 'z)(
'msd2 ! 'fk ==> 'msd1 ! 'fk)< 'msd1 : SU | canReject : false,inputs : < 'fk : Input | status : Undef,time : 0,contract : r >,outputs :(< 'v1 :
    Output | dependsOn : empty,status : Undef,time : 0 > < 'x1 : Output | dependsOn : empty,status : Undef,time : 0 > < 'z : Output | dependsOn
    : empty,status : Undef,time : 0 >),state : Instantiated,time : 0 > < 'msd2 : SU | canReject : false,inputs :(< 'v1 : Input | status : Undef,
    time : 0,contract : r > < 'x1 : Input | status : Undef,time : 0,contract : r > < 'z : Input | status : Undef,time : 0,contract : d >),outputs : < 'fk :
    Output | dependsOn :('v1 , 'x1),status : Undef,time : 0 >,state : Instantiated,time : 0 >) . )


(red dfs(('msd1 ! 'fk, 'msd1 ! 'v1, 'msd1 ! 'x1, 'msd1 ! 'z, 'msd2 ! 'fk, 'msd2 ! 'v1, 'msd2 ! 'x1, 'msd2 ! 'z),env(nil,empty,1,0,('msd1 ! 'fk |-> 0, 'msd1 ! 'v1 |-> 0, 'msd1 ! 'x1 |-> 0, 'msd1 ! 'z |-> 0, 'msd2 ! 'fk |-> 0, 'msd2 ! 'v1 |-> 0, 'msd2 ! 'x1 |-> 0, 'msd2 ! 'z |-> 0)), (
'msd1 ! 'v1 ==> 'msd2 ! 'v1)(
'msd1 ! 'x1 ==> 'msd2 ! 'x1)(
'msd1 ! 'z ==> 'msd2 ! 'z)(
'msd2 ! 'fk ==> 'msd1 ! 'fk)< 'msd1 : SU | canReject : false,inputs : < 'fk : Input | status : Undef,time : 0,contract : r >,outputs :(< 'v1 :
    Output | dependsOn : empty,status : Undef,time : 0 > < 'x1 : Output | dependsOn : empty,status : Undef,time : 0 > < 'z : Output | dependsOn
    : empty,status : Undef,time : 0 >),state : Instantiated,time : 0 > < 'msd2 : SU | canReject : false,inputs :(< 'v1 : Input | status : Undef,
    time : 0,contract : r > < 'x1 : Input | status : Undef,time : 0,contract : r > < 'z : Input | status : Undef,time : 0,contract : d >),outputs : < 'fk :
    Output | dependsOn :('v1 , 'x1),status : Undef,time : 0 >,state : Instantiated,time : 0 >) . )

(red dfs(('msd1 ! 'fk, 'msd1 ! 'v1, 'msd1 ! 'x1, 'msd1 ! 'z, 'msd2 ! 'fk, 'msd2 ! 'v1, 'msd2 ! 'x1, 'msd2 ! 'z),env(nil,empty,1,('msd1 ! 'fk |-> 0, 'msd1 ! 'v1 |-> 0, 'msd1 ! 'x1 |-> 0, 'msd1 ! 'z |-> 0, 'msd2 ! 'fk |-> 0, 'msd2 ! 'v1 |-> 0, 'msd2 ! 'x1 |-> 0, 'msd2 ! 'z |-> 0)),(
'msd1 ! 'v1 ==> 'msd2 ! 'v1)(
'msd1 ! 'x1 ==> 'msd2 ! 'x1)(
'msd1 ! 'z ==> 'msd2 ! 'z)(
'msd2 ! 'fk ==> 'msd1 ! 'fk)< 'msd1 : SU | canReject : false,inputs : < 'fk : Input | contract : r,status : Undef,time : 0,value : 0 >,outputs :(< 'v1 : Output | dependsOn : empty,status : Undef,time : 0,value : 0 > < 'x1 : Output | dependsOn : empty,status : Undef,time : 0,value : 0 > < 'z : Output | dependsOn : empty,status : Undef,time : 0,value : 0 >),path : "A", state : Instantiated,time : 0 > < 'msd2 : SU | canReject : false,inputs :(< 'v1 : Input | contract : r,status : Undef,time : 0,value : 0 > < 'x1 : Input | contract : r, status : Undef,time : 0,value : 0 > < 'z : Input | contract : d,status : Undef,time : 0,value : 0 >),outputs : < 'fk : Output | dependsOn :('v1, 'x1),status : Undef,time : 0,value : 0 >,path : "A",  state : Instantiated,time : 0 >) .)


(red dfs(('msd1 ! 'fk, 'msd1 ! 'v1, 'msd1 ! 'x1, 'msd1 ! 'z, 'msd2 ! 'fk, 'msd2 ! 'v1, 'msd2 ! 'x1, 'msd2 ! 'z),env(nil,empty,1, 0, ('msd1 ! 'fk |-> 0, 'msd1 ! 'v1 |-> 0, 'msd1 ! 'x1 |-> 0, 'msd1 ! 'z |-> 0, 'msd2 ! 'fk |-> 0, 'msd2 ! 'v1 |-> 0, 'msd2 ! 'x1 |-> 0, 'msd2 ! 'z |-> 0)),(
'msd1 ! 'v1 ==> 'msd2 ! 'v1)(
'msd1 ! 'x1 ==> 'msd2 ! 'x1)(
'msd1 ! 'z ==> 'msd2 ! 'z)(
'msd2 ! 'fk ==> 'msd1 ! 'fk)< 'msd1 : SU | canReject : false,inputs : < 'fk : Input | contract : r,status : Undef,time : 0, value : 0 >,outputs :(< 'v1 : Output | dependsOn : empty,status : Undef,time :
    0,value : 0 > < 'x1 : Output | dependsOn : empty,status : Undef,time : 0,value : 0 > < 'z : Output | dependsOn : empty,status : Undef,time : 0,value : 0 >),path : "A",
    state : Instantiated,time : 0 > < 'msd2 : SU | canReject : false,inputs :(< 'v1 : Input | contract : r,status : Undef,time : 0,value : 0 > < 'x1 : Input | contract : r,status : Undef,time : 0,type :
    integer,value : 0 > < 'z : Input | contract : d,status : Undef,time : 0,value : 0 >),outputs : < 'fk : Output | dependsOn :('v1, 'x1),status : Undef,time : 0,value : 0 >,path : "A",
    state : Instantiated,time : 0 >) .)


(red tarjan((
'msd1 ! 'v1 ==> 'msd2 ! 'v1)(
'msd1 ! 'x1 ==> 'msd2 ! 'x1)(
'msd2 ! 'fk ==> 'msd1 ! 'fk)(
'msd2 ! 'z ==> 'msd3 ! 'z)(
'msd3 ! 'G ==> 'msd2 ! 'G)< 'msd1 : SU | canReject : true,inputs : < 'fk : Input | contract : r,status : Undef,time : 0,value : 0 >,
    outputs :(< 'v1 : Output | dependsOn : empty,status : Undef,time : 0,value : 0 > < 'x1 : Output | dependsOn : empty,status : Undef,
    time : 0,value : 0 >),path : "A",state : Instantiated,time : 0 > < 'msd2 : SU | canReject : true,inputs :(< 'G : Input | contract : r,
    status : Undef,time : 0,value : 0 > < 'v1 : Input | contract : r,status : Undef,time : 0,value : 0 > < 'x1 : Input |
    contract : d,status : Undef,time : 0,value : 0 >),outputs :(< 'fk : Output | dependsOn :('v1, 'x1),status : Undef,time : 0,value : 0 > < 'z : Output | dependsOn : empty,status : Undef,time : 0,value : 0 >),path : "A",state : Instantiated,time : 0 >
    < 'msd3 : SU | canReject : true,inputs : < 'z : Input | contract : d,status : Undef,time : 0,value : 0 >,outputs : < 'G : Output |
    dependsOn : 'z,status : Undef,time : 0,value : 0 >,path : "A",state : Instantiated,time : 0 >) . )


   (red  dfs(('msd1 ! 'fk, 'msd1 ! 'v1, 'msd1 ! 'x1, 'msd2 ! 'G, 'msd2 ! 'fk, 'msd2 ! 'v1, 'msd2 ! 'x1, 'msd2 ! 'z, 'msd3 ! 'G, 'msd3 ! 'z),env(nil,empty,1,0,(
    'msd1 ! 'fk |-> 0, 'msd1 ! 'v1 |-> 0, 'msd1 ! 'x1 |-> 0, 'msd2 ! 'G |-> 0, 'msd2 ! 'fk |-> 0, 'msd2 ! 'v1 |-> 0, 'msd2 ! 'x1 |-> 0, 'msd2 ! 'z |-> 0,
    'msd3 ! 'G |-> 0, 'msd3 ! 'z |-> 0)),(
'msd1 ! 'v1 ==> 'msd2 ! 'v1)(
'msd1 ! 'x1 ==> 'msd2 ! 'x1)(
'msd2 ! 'fk ==> 'msd1 ! 'fk)(
'msd2 ! 'z ==> 'msd3 ! 'z)(
'msd3 ! 'G ==> 'msd2 ! 'G)< 'msd1 : SU | canReject : true,inputs : < 'fk : Input | contract : r,status : Undef,time : 0,value : 0 >,
    outputs :(< 'v1 : Output | dependsOn : empty,status : Undef,time : 0,value : 0 > < 'x1 : Output | dependsOn : empty,status : Undef,
    time : 0,value : 0 >),path : "A",state : Instantiated,time : 0 > < 'msd2 : SU | canReject : true,inputs :(< 'G : Input | contract : r,
    status : Undef,time : 0,value : 0 > < 'v1 : Input | contract : r,status : Undef,time : 0,value : 0 > < 'x1 : Input |
    contract : d,status : Undef,time : 0,value : 0 >),outputs :(< 'fk : Output | dependsOn :('v1, 'x1),status : Undef,time : 0,value : 0 > < 'z : Output | dependsOn : empty,status : Undef,time : 0,value : 0 >),path : "A",state : Instantiated,time : 0 >
    < 'msd3 : SU | canReject : true,inputs : < 'z : Input | contract : d,status : Undef,time : 0,value : 0 >,outputs : < 'G : Output |
    dependsOn : 'z,status : Undef,time : 0,value : 0 >,path : "A",state : Instantiated,time : 0 >) .)