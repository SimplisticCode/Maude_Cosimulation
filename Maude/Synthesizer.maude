load Scenario
*** Do things to start
(omod SYNTHESIZER is 
   protecting StepFinder + SCENARIO .

   op performStepNegotiation : Configuration -> Configuration .
   op performGlobalStep : Configuration -> Configuration .
   op allSUsinSimulation : OidSet Configuration -> Bool .
   op simulationStepDone : OidSet Configuration Nat -> Bool .
   op allSUsinUnloaded : OidSet Configuration -> Bool .
   op initializationDone : OidSet Configuration -> Bool .
  
   vars SU1 SU2 INPUT OUTPUT OCH ALG : Oid .
   vars SUTIME INPUTTIME TIME : Nat .
   var VALUE : FMIValue .
   vars INPUTS OUTPUTS CONF INITSTATE FINALSTATE SUS : Configuration . 
   var STATE : fmiState .
   vars ALGO STEPNEGOALGO : ActionList .
   vars FEEDTHROUGH SUIDs : OidSet .
   var SUIDsNE : NeOidSet . 
   vars STEPSIZE NEGOTIATEDSTEPSIZE FUTURETIME ENDTIME : NzNat .
   var LOOP : AlgebraicLoop .  
   vars LOOPS SOLVEDLOOPS : AlgebraicLoopSet .  
   vars PORTVALUES : PortValueMap .
   vars SUINSTANCE SIMULATIONDATA : Object .
   var EVENT : Action .
   vars STATE1 STATE2 : fmiState .
   var CONTRACT : Contract .

  *** Find instrumentation
  *** Succedes if there is a contract 
  ***
  eq simulationStepDone((SU1, SUIDs), < SU1 : SU | time : TIME, inputs : INPUTS, outputs : OUTPUTS > CONF, TIME) 
  = TIME > 0 and allDef(INPUTS, TIME) and allDef(OUTPUTS, TIME) and simulationStepDone(SUIDs, CONF, TIME) .
  eq simulationStepDone(empty, CONF, TIME) = true .

  eq initializationDone((SU1, SUIDs), < SU1 : SU | inputs : INPUTS, outputs : OUTPUTS > CONF) = allDef(INPUTS, 0) and allDef(OUTPUTS, 0) and initializationDone(SUIDs, CONF) .
  eq initializationDone(empty, CONF) = true .

  *** Step Negotiation
  ceq performStepNegotiation(CONF 
                        < OCH : SimulationData | actualStepSize : STEPSIZE, SNSet : SUIDsNE >
                        < ALG : AlgorithmData |  CosimStep : ALGO > ) = 
                        < OCH : SimulationData | actualStepSize : NEGOTIATEDSTEPSIZE, SNSet : empty >
                        < ALG : AlgorithmData |  CosimStep : (ALGO ; EVENT) > CONF
                              if INITSTATE := CONF < OCH : SimulationData | >
                              /\ < NEGOTIATEDSTEPSIZE ++ STEPNEGOALGO > := findStep(SUIDsNE, INITSTATE, INITSTATE, emptyList)
                              /\ EVENT := complexEvent: StepNegotiation SaveSUs: SUIDsNE RestoreSUs: SUIDsNE Actions: STEPNEGOALGO .

  eq performStepNegotiation(CONF < OCH : SimulationData | SNSet : empty > ) 
                              = CONF < OCH : SimulationData | > .  

  *** All SUS are in the simulation fmistate
  eq allSUsinSimulation((SU1, SUIDs), < SU1 : SU | fmistate : STATE > SUS) = STATE == Simulation and allSUsinSimulation(SUIDs, SUS) . 
  eq allSUsinSimulation(empty, CONF) = true .

  *** All SUS unloaded
  eq allSUsinUnloaded((SU1, SUIDs), < SU1 : SU | fmistate : STATE > SUS) = STATE == Unloaded and allSUsinUnloaded(SUIDs, SUS) . 
  eq allSUsinUnloaded(empty, CONF) = true .

  ***SUS -> fmiState -> fmiState -> SUS
  op moveState : OidSet Configuration fmiState fmiState -> Configuration .
  eq moveState((SU1, SUIDs), < SU1 : SU | fmistate : STATE1 > SUS, STATE1, STATE2) = 
     < SU1 : SU | fmistate : STATE2 > moveState(SUIDs, SUS, STATE1, STATE2) .
  eq moveState(empty, CONF, STATE1, STATE2) = CONF .

  op moveToInitialize : OidSet Configuration -> Configuration .
  eq moveToInitialize((SU1, SUIDs), < SU1 : SU | inputs : INPUTS , outputs : OUTPUTS, fmistate : ExperimentSetup > SUS) = 
     < SU1 : SU | fmistate : Initialize, inputs : undefPorts(INPUTS, 0), outputs : undefPorts(OUTPUTS, 0) > moveToInitialize(SUIDs, SUS) .
  eq moveToInitialize(empty, CONF) = CONF .

  *** FMI-standard fmistate transition:
  *** Initialize all - to have fewer states
  rl [setupExp] : { < SU1 : SU | fmistate : Instantiated > CONF
                    < OCH : SimulationData | suids : SUIDsNE > 
                    < ALG : AlgorithmData |  Initialization : ALGO > 
                   }
                 => { 
                   moveState(SUIDsNE, < SU1 : SU | > CONF, Instantiated, ExperimentSetup)
                   < ALG : AlgorithmData |  Initialization : (ALGO ; (fmiEvent: CreateExp SUs: SUIDsNE)) > 
                   < OCH : SimulationData | > 
                  } .

  rl [init] : { < SU1 : SU | fmistate : ExperimentSetup > CONF
                 < OCH : SimulationData | suids : SUIDsNE > 
                 < ALG : AlgorithmData | Initialization : ALGO > 
               } 
           => { 
             moveToInitialize(SUIDsNE, < SU1 : SU | > CONF)
             < ALG : AlgorithmData | Initialization : (ALGO ; (fmiEvent: EnterInitialization SUs: SUIDsNE)) > 
             < OCH : SimulationData | > 
             } .
           
  crl [simulate] : { < SU1 : SU | fmistate : Initialize > CONF
                    < OCH : SimulationData | suids : SUIDsNE, values : empty > 
                    < ALG : AlgorithmData | Initialization : ALGO > 
                  } 
                => { 
                    moveState(SUIDsNE, < SU1 : SU | > CONF, Initialize, Simulation)
                    < OCH : SimulationData | > 
                    < ALG : AlgorithmData | Initialization : (ALGO ; EVENT) > 
                    }
                if initializationDone(SUIDsNE, < SU1 : SU | fmistate : Initialize > CONF)
                /\ EVENT := fmiEvent: ExitInitialization SUs: SUIDsNE .

  crl [terminate] : { < SU1 : SU | time : ENDTIME, fmistate : Simulation > CONF
                    < OCH : SimulationData | suids : SUIDsNE > 
                    < ALG : AlgorithmData | Termination : ALGO, endTime : ENDTIME > 
                    }
                 => { 
                   moveState(SUIDsNE, < SU1 : SU | > CONF, Simulation, Terminated)
                   < ALG : AlgorithmData | Termination : (ALGO ; (fmiEvent: Terminate SUs: SUIDsNE)) > 
                   < OCH : SimulationData | > 
                  } 
                 if simulationStepDone(SUIDsNE, < SU1 : SU | > CONF, ENDTIME) .

  rl [free] : { < SU1 : SU | fmistate : Terminated > CONF
                < OCH : SimulationData | suids : SUIDsNE > 
                < ALG : AlgorithmData | Termination : ALGO > 
              }
              => { 
                moveState(SUIDsNE, < SU1 : SU | > CONF, Terminated, InstanceFreed)
                < ALG : AlgorithmData | Termination : (ALGO ; (fmiEvent: FreeInstance SUs: SUIDsNE)) >
                < OCH : SimulationData | >  
              } .

  rl [unload] : { < SU1 : SU | fmistate : InstanceFreed > CONF
                  < OCH : SimulationData | suids : SUIDsNE > 
                  < ALG : AlgorithmData | Termination : ALGO > 
                }
                => { 
                  moveState(SUIDsNE, < SU1 : SU | > CONF, InstanceFreed, Unloaded)
                  < OCH : SimulationData | > 
                  < ALG : AlgorithmData | Termination : (ALGO ; (fmiEvent: Unload SUs: SUIDsNE)) > 
                } .

  *** Simulation Procedure
  *** Perform the global simulation step
  *** Set input                  
  ceq performGlobalStep(CONF < SU1 : SU | time : SUTIME, inputs : (< INPUT : Input | time : INPUTTIME, contract : CONTRACT > INPUTS) > 
          < OCH : SimulationData | values : (((SU1 ! INPUT) |-> < TIME ; VALUE >), PORTVALUES) >
          < ALG : AlgorithmData | CosimStep : ALGO > 
          ) = 
      performGlobalStep(CONF SUINSTANCE 
            < OCH : SimulationData | values : PORTVALUES >
            < ALG : AlgorithmData | CosimStep : (ALGO ; EVENT) > 
            )
    if (CONTRACT == reactive and TIME > INPUTTIME and INPUTTIME == SUTIME) or (CONTRACT == delayed and TIME == SUTIME and INPUTTIME < SUTIME)    
      /\ SUINSTANCE := < SU1 : SU | inputs : (< INPUT : Input | value : VALUE, time : TIME > INPUTS) >
      /\ EVENT := portEvent: Set SU: SU1 PId: INPUT .

  *** Step
  ceq performGlobalStep(CONF < SU1 : SU | time : TIME, inputs : INPUTS, outputs : OUTPUTS > 
    < OCH : SimulationData | actualStepSize : STEPSIZE >
    < ALG : AlgorithmData | CosimStep : ALGO, endTime : ENDTIME > )
      = 
    performGlobalStep(CONF SUINSTANCE 
          < OCH : SimulationData | >
          < ALG : AlgorithmData | CosimStep : (ALGO ; EVENT) > )
      if FUTURETIME := TIME + STEPSIZE 
      /\ canStep(TIME, FUTURETIME, INPUTS, OUTPUTS) and FUTURETIME <= ENDTIME 
      /\ SUINSTANCE := stepAction(< SU1 : SU | >, STEPSIZE)
      /\ EVENT := stepEvent: SU1 StepSize: STEPSIZE . 

  *** Get
  ceq performGlobalStep(CONF 
    < SU1 : SU | outputs : (< OUTPUT : Output | time : TIME, status : Undef, value : VALUE, dependsOn : FEEDTHROUGH > OUTPUTS), inputs : INPUTS >  
    <  ALG : AlgorithmData | CosimStep : ALGO > 
    < OCH : SimulationData | values : PORTVALUES >
    (SU1 ! OUTPUT ==> SU2 ! INPUT)) 
    =
  performGlobalStep(CONF SUINSTANCE (SU1 ! OUTPUT ==> SU2 ! INPUT)
    <  ALG : AlgorithmData | CosimStep : (ALGO ; EVENT) > 
    < OCH : SimulationData | values : insert((SU2 ! INPUT), < TIME ; VALUE >, PORTVALUES) >)
  if feedthroughSatisfied(FEEDTHROUGH, INPUTS, TIME)
    /\ SUINSTANCE := < SU1 : SU | outputs : (< OUTPUT : Output | status : Def > OUTPUTS) >
    /\ EVENT := portEvent: Get SU: SU1 PId: OUTPUT . 
                      

  *** Algebraic Loop - solve and remove loop
  eq performGlobalStep(CONF 
      < OCH : SimulationData | unsolvedSCC : (LOOP , LOOPS), solvedSCC : SOLVEDLOOPS > ) = 
    performGlobalStep(
      solveLoop(CONF < OCH : SimulationData | unsolvedSCC : LOOPS, solvedSCC : (LOOP , SOLVEDLOOPS) >, LOOP)) [owise] .

  *** Return the configuration is the simulation is done and update the simulation time
  ceq performGlobalStep(CONF
        < OCH : SimulationData | simulationTime : TIME, actualStepSize : STEPSIZE, suids : SUIDsNE >) 
    = CONF < OCH : SimulationData | simulationTime : FUTURETIME >
  if FUTURETIME := TIME + STEPSIZE
  /\ simulationStepDone(SUIDsNE, CONF, FUTURETIME) .


  *** Reset and start over if the endtime is not reached, reset loopsSolver and StepNegotiation
  ***ceq performGlobalStep(CONF endTime: ENDTIME) = CONF endTime: ENDTIME
  ***  if simulationStepDone(CONF) and endTime: ENDTIME .

  *** Initialization Procedure 
  crl [get-init] :
    < SU1 : SU | fmistate : Initialize, inputs : INPUTS, 
      outputs : (< OUTPUT : Output | status : Undef, value : VALUE, dependsOn : FEEDTHROUGH > OUTPUTS) > 
    (SU1 ! OUTPUT ==> SU2 ! INPUT)
    < OCH : SimulationData | values : PORTVALUES > 
    < ALG : AlgorithmData | Initialization : ALGO >
    => < SU1 : SU | outputs : (< OUTPUT : Output | status : Def > OUTPUTS) > 
        (SU1 ! OUTPUT ==> SU2 ! INPUT)
        < OCH : SimulationData | values : insert((SU2 ! INPUT), < 0 ; VALUE >, PORTVALUES) >  
        < ALG : AlgorithmData | Initialization : (ALGO ; EVENT) >
  if feedthroughSatisfied(FEEDTHROUGH, INPUTS, 0)
    /\ EVENT := portEvent: Get SU: SU1 PId: OUTPUT . 

  crl [set-init] : < SU1 : SU | inputs : (< INPUT : Input | status : Undef > INPUTS), fmistate : Initialize > 
        < OCH : SimulationData | values : (((SU1 ! INPUT) |-> < TIME ; VALUE >), PORTVALUES) >
        < ALG : AlgorithmData | Initialization : ALGO >
    => < SU1 : SU | inputs : (< INPUT : Input | status : Def, value : VALUE > INPUTS ) >
       < OCH : SimulationData | values : PORTVALUES >
       < ALG : AlgorithmData | Initialization : (ALGO ; EVENT) >
    if EVENT := portEvent: Set SU: SU1 PId: INPUT .

  ***rl [init-loop] : CONF unsolvedSCC: (L ;; LOOPS) => solveLoop(CONF unsolvedSCC: LOOPS, L) .                 

  ***If the scenario contains SUS that require step negotiation
  ***The step negotiation
  crl [stepNego] : { CONF  < OCH : SimulationData | SNSet : SUIDsNE > } => 
          { performStepNegotiation(CONF < OCH : SimulationData | suids : SUIDsNE > ) }
          if allSUsinSimulation(SUIDsNE, CONF) .
 

  crl [simulationStep]: { 
        CONF 
        < OCH : SimulationData | SNSet : empty, simulationTime : TIME, suids : SUIDsNE > 
        < ALG : AlgorithmData | endTime : ENDTIME > } => 
          { 
            performGlobalStep(CONF < OCH : SimulationData | > < ALG : AlgorithmData | >) 
          }
          if allSUsinSimulation(SUIDsNE, CONF) and TIME < ENDTIME .

  op getOrchestrator : Configuration -> Configuration .
  eq getOrchestrator(CONF < OCH : AlgorithmData | >) = < OCH : AlgorithmData | > .
  eq getOrchestrator(CONF) = none [owise] .

  crl [getAlgortihm]: { INITSTATE } => { getOrchestrator(FINALSTATE) }
      if isInitialState(INITSTATE)
      /\ LOOPS := tarjan(INITSTATE)
      /\ SUIDsNE := getSUIDsOfScenario(INITSTATE)
      /\ SIMULATIONDATA := initialOrchestrationData(1,LOOPS,SUIDsNE)
      /\ CONF := calculateSNSet(INITSTATE) SIMULATIONDATA initialAlgorithmData(1)
      /\ {CONF} => { FINALSTATE } 
      /\ allSUsinUnloaded(SUIDsNE, FINALSTATE) .


endom)

eof

(show all .)
q 

*** Command to get all the configurations
( search init =>* {C:Configuration} .)


( red isInitialState(("ctrl" ! "valveState" ==> "tank" ! "valveState")(
"tank" ! "waterlevel" ==> "ctrl" ! "waterlevel")< "ctrl" : SU | canReject : false,fmistate : Instantiated,inputs : < "waterlevel" : Input | contract :
    delayed,status : Undef,time : 0,type : integer,value : < 0 > >,outputs : < "valveState" : Output | dependsOn : empty,status : Undef,time : 0,type :
    integer,value : < 0 > >,parameters : none,path : "",time : 0 > < "tank" : SU | canReject : false,fmistate : Instantiated,inputs : < "valveState" :
    Input | contract : delayed,status : Undef,time : 0,type : integer,value : < 0 > >,outputs : < "waterlevel" : Output | dependsOn : empty,status :
    Undef,time : 0,type : integer,value : < 0 > >,parameters : none,path : "",time : 0 >) .)

( frew [100] setup . )

( red moveState(setup, Instantiated, ExperimentSetup) . )

(red allSUsinUnloaded(< "ctrl" : SU | canReject : false,fmistate : Unloaded,inputs : < "waterlevel" : Input | contract : delayed,status : Def,time : 1,type : integer,value : < 2546248239 > >,outputs : < "valveState" : Output | dependsOn : empty,status : Def,time : 1,type : integer,value : < 2546248239 > >,parameters : none,path : "",time : 1 > < "tank" : SU | canReject : false,fmistate : Unloaded,inputs : < "valveState" : Input | contract : delayed,status : Def,time : 1,type : integer,value : < 2546248239 > >,outputs : < "waterlevel" : Output | dependsOn : empty,status : Def, time : 1,type : integer,value : < 2546248239 > >,parameters : none,path : "",time : 1 >) . )


(search setup. )

(search in COSIMULATION : setup =>1 C:Configuration . )

show search graph .

(red validScenario(externalConnection, simulationUnits) . )

( red allSUsinSimulation(setup) . )

( red breakLoop(('msd1 ! 'x1) ;; ('msd2 ! 'x1) ;; ('msd2 ! 'v1) ;; ('msd1 ! 'v1), (simulationUnits externalConnection actualStepSize: 1 endTime: 1 CosimStep: emptyList SNSet: empty guessOn: emptyLoop) , R) . )

( red findStep(setup,setup) . )
( red getAllPorts(simulationUnits, empty) . )

set trace on .
trace exclude FULL-MAUDE . set trace substitution off . set trace eq off . 

(red moveState(("ctrl" ! "valveState" ==> "tank" ! "valveState")(
"tank" ! "waterlevel" ==> "ctrl" ! "waterlevel")< "ctrl" : SU | canReject : false,fmistate : Instantiated,inputs : < "waterlevel" : Input |
    contract : delayed,status : Undef,time : 0,type : integer,value : < 0 > >,outputs : < "valveState" : Output | dependsOn : empty,status :
    Undef,time : 0,type : integer,value : < 0 > >,parameters : none,path : "",time : 0 > < "tank" : SU | canReject : false,fmistate :
    Instantiated,inputs : < "valveState" : Input | contract : delayed,status : Undef,time : 0,type : integer,value : < 0 > >,outputs : <
    "waterlevel" : Output | dependsOn : empty,status : Undef,time : 0,type : integer,value : < 0 > >,parameters : none,path : "",time : 0 >,
    Instantiated, ExperimentSetup ) . )