load StepFinder
load Scenario

(omod COSIMULATION is 
   protecting StepFinder + SCENARIO .

   op performStepNegotiation : Configuration -> Configuration .
   op performGlobalStep : Configuration -> Configuration .
   op allSUinSimulation : Configuration -> Bool .
   op simulationStepDone : Configuration -> Bool .
   op getEnableOutputs : Configuration Configuration Nat OidSet -> OidSet .
   op ValuesToSet : Configuration SUID Nat PortValueMap PortValueMap -> PortValueMap .
   op ValuesToSetInit : Configuration SUID PortValueMap PortValueMap -> PortValueMap .

   vars ID1 ID2 : SUID .
   vars INPUT OUTPUT : PortId .
   vars TIME TIME1 TIME2 VALUE : Nat .
   var PORTVALUE : PortValueAndTime .
   vars INPUTS OUTPUTS CONF STARTCONF : Configuration . 
   var STATE : fmiState .
   vars ALGO STEPNEGOALGO : ActionList .
   vars SUIDs FEEDTHROUGH PORTIDSET : OidSet .
   var SUIDsNE : NeOidSet . 
   vars STEPSIZE NEGOTIATEDSTEPSIZE FUTURETIME ENDTIME : NzNat .
   var LOOP : AlgebraicLoop .  
   vars LOOPS SOLVEDLOOPS LOOPTOSOLVE : AlgebraicLoopSet .  
   var INPUTTYPE : Contract .
   vars PORTVALUES PORTVALUESTOSET : PortValueMap .
   var SUINSTANCE : Object .
   var EVENT : Action .

  eq simulationStepDone(< ID1 : SU | time : TIME, inputs : INPUTS, outputs : OUTPUTS > CONF) = TIME > 0 and allDef(INPUTS, TIME) and allDef(OUTPUTS, TIME) and simulationStepDone(CONF) .
  eq simulationStepDone(CONF) = true [owise] .

  *** Step Negotiation
  ceq performStepNegotiation(CONF stepSize: STEPSIZE UnsolvedSCC: LOOPS SolvedSCC: SOLVEDLOOPS
                                 SNSet: SUIDsNE Algorithm: ALGO) = 
                              CONF SNSet: empty Algorithm: (ALGO ; EVENT) stepSize: NEGOTIATEDSTEPSIZE
                                UnsolvedSCC: LOOPS SolvedSCC: SOLVEDLOOPS
                                ***UnsolvedSCC: (LOOPS - LOOPTOSOLVE)  SolvedSCC: (SOLVEDLOOPS ;; LOOPTOSOLVE)
                              if STARTCONF := CONF stepSize: STEPSIZE UnsolvedSCC: LOOPS SolvedSCC: SOLVEDLOOPS
                              /\ < NEGOTIATEDSTEPSIZE ++ STEPNEGOALGO > := findStep(SUIDsNE, STARTCONF, STARTCONF, emptyList)
                              ***/\ LOOPTOSOLVE := loopsInStepNegotiation(LOOPS, SUIDs, CONF) 
                              *** I need to break the loop (by removing the reactive connections) here to avoid it
                              /\ EVENT := complexEvent: StepNegotiation SaveSUs: SUIDsNE RestoreSUs: SUIDsNE Actions: STEPNEGOALGO .

  eq performStepNegotiation(CONF SNSet: empty) = CONF .  

  *** All SUs are in the simulation state
  eq allSUinSimulation(< ID1 : SU | state : STATE > CONF) = STATE == Simulation and allSUinSimulation(CONF) . 
  eq allSUinSimulation(CONF) = true [owise] .

  eq getEnableOutputs(none, INPUTS, TIME, PORTIDSET) = PORTIDSET . 
  ceq getEnableOutputs(< OUTPUT : Output | status : Undef, dependsOn : FEEDTHROUGH > OUTPUTS, INPUTS, TIME, PORTIDSET) = getEnableOutputs(OUTPUTS, INPUTS, TIME, (OUTPUT , PORTIDSET))
        if feedthroughSatisfied(FEEDTHROUGH, INPUTS, TIME) .

  eq getEnableOutputs(< OUTPUT : Output | > OUTPUTS, INPUTS, TIME, PORTIDSET) = getEnableOutputs(OUTPUTS, INPUTS, TIME, PORTIDSET) [owise] .

  eq ValuesToSet(none, ID1, TIME, PORTVALUES, PORTVALUESTOSET) = PORTVALUESTOSET .
  ceq ValuesToSet(< INPUT : Input | time : TIME1, contract : INPUTTYPE > INPUTS, ID1, TIME, ((INPUT |-> < TIME2 ; VALUE >), PORTVALUES), PORTVALUESTOSET) 
                        = ValuesToSet(INPUTS, ID1, TIME, PORTVALUES, insert(INPUT, < TIME2 ; VALUE >, PORTVALUESTOSET)) 
                        if TIME1 < TIME2 and ((INPUTTYPE == d and TIME1 < TIME) or (INPUTTYPE == r and TIME == TIME1)) .

  eq ValuesToSet(< INPUT : Input | > INPUTS, ID1, TIME, PORTVALUES, PORTVALUESTOSET) = ValuesToSet(INPUTS, ID1, TIME, PORTVALUES, PORTVALUESTOSET) [owise] .

  eq ValuesToSetInit(none, ID1, PORTVALUES, PORTVALUESTOSET) = PORTVALUESTOSET .
  eq ValuesToSetInit(< INPUT : Input | status : Undef > INPUTS, ID1, ((INPUT |-> < 0 ; VALUE >), PORTVALUES), PORTVALUESTOSET) 
                        = ValuesToSetInit(INPUTS, ID1, PORTVALUES, insert(INPUT, < 0 ; VALUE >, PORTVALUESTOSET)) .
  eq ValuesToSetInit(< INPUT : Input | > INPUTS, ID1, PORTVALUES, PORTVALUESTOSET) 
            = ValuesToSetInit(INPUTS, ID1, PORTVALUES, PORTVALUESTOSET) [owise] .

  *** How can I make it faster?
  *** Perform the global simulation step
  *** Set input                     
  ceq performGlobalStep(CONF < ID1 : SU | time : TIME, inputs : (< INPUT : Input | > INPUTS) > Algorithm: ALGO valuesToSet: ((INPUT |-> PORTVALUE) , PORTVALUES)) = 
      performGlobalStep(CONF SUINSTANCE Algorithm: (ALGO ; EVENT) valuesToSet: (((INPUT |-> PORTVALUE) , PORTVALUES) \ PORTVALUESTOSET))
                        if PORTVALUESTOSET := ValuesToSet((< INPUT : Input | > INPUTS), ID1, TIME, ((INPUT |-> PORTVALUE) , PORTVALUES), empty) 
                        /\ PORTIDSET := getPortFromMap(PORTVALUESTOSET,empty) 
                        /\ SUINSTANCE := setActionPortMap( < ID1 : SU | >, PORTVALUESTOSET) 
                        /\ EVENT := portEvent: Set SU: ID1 PId: PORTIDSET .
  *** Step
  ceq performGlobalStep(CONF < ID1 : SU | time : TIME, inputs : INPUTS, outputs : OUTPUTS > stepSize: STEPSIZE endTime: ENDTIME Algorithm: ALGO)  = 
      performGlobalStep(CONF SUINSTANCE stepSize: STEPSIZE endTime: ENDTIME Algorithm: (ALGO ; EVENT))
                        if FUTURETIME := TIME + STEPSIZE 
                        /\ canStep(TIME, FUTURETIME, INPUTS, OUTPUTS) and FUTURETIME <= ENDTIME 
                        /\ SUINSTANCE := stepAction(< ID1 : SU | >, STEPSIZE)
                        /\ EVENT := stepEvent: ID1 StepSize: STEPSIZE . 

  *** Get
  ceq performGlobalStep(CONF < ID1 : SU | time : TIME, inputs : INPUTS, outputs : OUTPUTS >  Algorithm: ALGO valuesToSet: PORTVALUES) =
      performGlobalStep(CONF SUINSTANCE Algorithm: (ALGO ; EVENT) valuesToSet: (PORTVALUES , PORTVALUESTOSET)) 
                      if PORTIDSET := getEnableOutputs(OUTPUTS, INPUTS, TIME, empty)
                      /\ PORTIDSET =/= empty 
                      /\ SUINSTANCE := getAction(< ID1 : SU | >, PORTIDSET)
                      /\ PORTVALUESTOSET := getActionValues(SUINSTANCE, PORTIDSET, CONF, empty)
                      /\ EVENT := portEvent: Get SU: ID1 PId: PORTIDSET . 
                      
  *** Algebraic Loop - solve and remove loop
  eq performGlobalStep(CONF UnsolvedSCC: (LOOP , LOOPS) SolvedSCC: SOLVEDLOOPS) = 
    performGlobalStep(solveLoop(CONF UnsolvedSCC: LOOPS SolvedSCC: (LOOP , SOLVEDLOOPS), LOOP)) [owise] .

  *** Return the configuration is the simulation is done
  ceq performGlobalStep(CONF) = CONF if simulationStepDone(CONF) .

  *** FMI-standard state transition:
  rl [setExp] : < ID1 : SU | state : Instantiated > Initialization: ALGO 
                 => < ID1 : SU | state : ExperimentSetup > Initialization: (ALGO ; (fmiEvent: CreateExp SU: ID1)) .

  rl [init] : < ID1 : SU | inputs : INPUTS , outputs : OUTPUTS, state : ExperimentSetup >  Initialization: ALGO 
           => < ID1 : SU | inputs : undefPorts(INPUTS, 0), outputs : undefPorts(OUTPUTS, 0), state : Initialize > 
              Initialization: (ALGO ; (fmiEvent: EnterInitialization SU: ID1)).

  crl [simulate] : < ID1 : SU | inputs : INPUTS , outputs : OUTPUTS, state : Initialize > CONF Initialization: ALGO 
                => < ID1 : SU | state : Simulation > CONF Initialization: (ALGO ; EVENT)
                if allDef(INPUTS, 0) and allDef(OUTPUTS, 0) and allInputsSet(CONF) 
                /\ EVENT := fmiEvent: ExitInitialization SU: ID1 .

  crl [terminate] : < ID1 : SU | time : TIME, inputs : INPUTS , outputs : OUTPUTS , state : Simulation > endTime: TIME Termination: ALGO 
                 => < ID1 : SU | state : Terminated > endTime: TIME Termination: (ALGO ; (fmiEvent: Terminate SU: ID1))
                 if allDef(OUTPUTS, TIME) and allDef(INPUTS, TIME) .

  rl [free] : < ID1 : SU | state : Terminated > Termination: ALGO 
           => < ID1 : SU | state : InstanceFreed > Termination: (ALGO ; (fmiEvent: FreeInstance SU: ID1)) .

  rl [unload] : < ID1 : SU | state : InstanceFreed > Termination: ALGO
              => < ID1 : SU | state : Unloaded > Termination: (ALGO ; (fmiEvent: Unload SU: ID1)) .

  *** Error handling in Maude

  *** Initialization Procedure 
  crl [get-init] : {< ID1 : SU | outputs : OUTPUTS, inputs : INPUTS, state : Initialize > Initialization: ALGO valuesToSet: PORTVALUES CONF}
                  => {SUINSTANCE Initialization: (ALGO ; EVENT) valuesToSet: (PORTVALUES , PORTVALUESTOSET) CONF}
                if PORTIDSET := getEnableOutputs(OUTPUTS, INPUTS, 0, empty)
                  /\ PORTIDSET =/= empty 
                  /\ SUINSTANCE := getAction(< ID1 : SU | >, PORTIDSET)
                  /\ PORTVALUESTOSET := getActionValues(SUINSTANCE, PORTIDSET, CONF, empty)
                  /\ EVENT := portEvent: Get SU: ID1 PId: PORTIDSET . 

   *** Inputs can only rely on one connection 
   crl [set-init] : < ID1 : SU | inputs : (< INPUT : Input | status : Undef > INPUTS), state : Initialize > Initialization: ALGO CONF valuesToSet: ((INPUT |-> PORTVALUE) , PORTVALUES)
                        => SUINSTANCE Initialization: (ALGO ; EVENT) valuesToSet: (((INPUT |-> PORTVALUE) , PORTVALUES) \ PORTVALUESTOSET)
                    if PORTVALUESTOSET := ValuesToSetInit((< INPUT : Input | status : Undef > INPUTS), ID1, ((INPUT |-> PORTVALUE) , PORTVALUES), empty) 
                      /\ PORTIDSET := getPortFromMap(PORTVALUESTOSET, empty) 
                      /\ SUINSTANCE := setActionPortMap( < ID1 : SU | >, PORTVALUESTOSET) 
                      /\ EVENT := portEvent: Set SU: ID1 PId: PORTIDSET .

  ***rl [init-loop] : CONF UnsolvedSCC: (L ;; LOOPS) => solveLoop(CONF UnsolvedSCC: LOOPS, L) .                 

  ***If the scenario contains SUs that require step negotiation
  ***The step negotiation
  crl [stepNego] : { CONF SNSet: SUIDsNE } => 
          { performStepNegotiation(CONF SNSet: SUIDsNE)}
          if allSUinSimulation(CONF) .


  crl [simulationStep]: { CONF SNSet: empty } => 
          { performGlobalStep(CONF SNSet: empty) }
        if allSUinSimulation(CONF) .

endom)

eof

( frew [100] setup . )

(search setup. )

(search in COSIMULATION : setup =>1 C:Configuration . )

show search graph .

(red validScenario(externalConnection, simulationUnits) . )

( red allSUinSimulation(setup) . )

( red breakLoop(('msd1 ! 'x1) ;; ('msd2 ! 'x1) ;; ('msd2 ! 'v1) ;; ('msd1 ! 'v1), (simulationUnits externalConnection stepSize: 1 endTime: 1 Algorithm: emptyList SNSet: empty guessOn: emptyLoop) , R) . )

( red findStep(setup,setup) . )
( red getAllPorts(simulationUnits, empty) . )

set trace on .
trace exclude FULL-MAUDE . set trace substitution off . set trace eq off . 